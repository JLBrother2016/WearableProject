<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\build\WearableDevice.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\build\WearableDevice.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060183: Last Updated: Thu May 03 15:18:59 2018
<BR><P>
<H3>Maximum Stack Usage =       4496 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
rt_file_thread_entry &rArr; do_mpu_stop &rArr; rename &rArr; f_rename &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_Cmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[361]">rt_device_write</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1ba]">rt_kprintf</a><BR>
 <LI><a href="#[2e]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2e]">DebugMon_Handler</a><BR>
 <LI><a href="#[43]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[43]">ADC_IRQHandler</a><BR>
 <LI><a href="#[1cd]">mutex_unlock</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1cd]">mutex_unlock</a><BR>
 <LI><a href="#[1cc]">mutex_lock</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1cd]">mutex_unlock</a><BR>
 <LI><a href="#[2cc]">finsh_type_check</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2cc]">finsh_type_check</a><BR>
 <LI><a href="#[2c9]">finsh_compile</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2c9]">finsh_compile</a><BR>
 <LI><a href="#[342]">proc_expr</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[33c]">proc_assign_expr</a><BR>
 <LI><a href="#[344]">proc_param_list</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[33c]">proc_assign_expr</a><BR>
 <LI><a href="#[340]">proc_unary_expr</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[33e]">proc_cast_expr</a><BR>
 <LI><a href="#[33e]">proc_cast_expr</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[33e]">proc_cast_expr</a><BR>
 <LI><a href="#[33c]">proc_assign_expr</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[33c]">proc_assign_expr</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[43]">ADC_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[2b]">BusFault_Handler</a> from stm32f4xx_it.o(i.BusFault_Handler) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[45]">CAN1_RX0_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[46]">CAN1_RX1_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[47]">CAN1_SCE_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[44]">CAN1_TX_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[71]">CAN2_RX0_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[72]">CAN2_RX1_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[73]">CAN2_SCE_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[70]">CAN2_TX_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[80]">CRYP_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[7f]">DCMI_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[3c]">DMA1_Stream0_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[3d]">DMA1_Stream1_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[3e]">DMA1_Stream2_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[3f]">DMA1_Stream3_IRQHandler</a> from dma.o(i.DMA1_Stream3_IRQHandler) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[40]">DMA1_Stream4_IRQHandler</a> from dma.o(i.DMA1_Stream4_IRQHandler) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[41]">DMA1_Stream5_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[42]">DMA1_Stream6_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[60]">DMA1_Stream7_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[69]">DMA2_Stream0_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[6a]">DMA2_Stream1_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[6b]">DMA2_Stream2_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[6c]">DMA2_Stream3_IRQHandler</a> from sdio_sd.o(i.DMA2_Stream3_IRQHandler) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[6d]">DMA2_Stream4_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[75]">DMA2_Stream5_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[76]">DMA2_Stream6_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[77]">DMA2_Stream7_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[2e]">DebugMon_Handler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[6e]">ETH_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[6f]">ETH_WKUP_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[37]">EXTI0_IRQHandler</a> from key.o(i.EXTI0_IRQHandler) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[59]">EXTI15_10_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[38]">EXTI1_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[39]">EXTI2_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[3a]">EXTI3_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[3b]">EXTI4_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[48]">EXTI9_5_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[35]">FLASH_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[82]">FPU_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[61]">FSMC_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[81]">HASH_RNG_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[29]">HardFault_Handler</a> from context_rvds.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[51]">I2C1_ER_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[50]">I2C1_EV_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[53]">I2C2_ER_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[52]">I2C2_EV_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[7a]">I2C3_ER_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[79]">I2C3_EV_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[2a]">MemManage_Handler</a> from stm32f4xx_it.o(i.MemManage_Handler) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[28]">NMI_Handler</a> from stm32f4xx_it.o(i.NMI_Handler) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[d7]">OP_add_byte</a> from finsh_ops.o(i.OP_add_byte) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[d9]">OP_add_dword</a> from finsh_ops.o(i.OP_add_dword) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[d8]">OP_add_word</a> from finsh_ops.o(i.OP_add_word) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[e6]">OP_and_byte</a> from finsh_ops.o(i.OP_and_byte) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[e8]">OP_and_dword</a> from finsh_ops.o(i.OP_and_dword) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[e7]">OP_and_word</a> from finsh_ops.o(i.OP_and_word) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[ef]">OP_bw_byte</a> from finsh_ops.o(i.OP_bw_byte) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[f1]">OP_bw_dword</a> from finsh_ops.o(i.OP_bw_dword) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[f0]">OP_bw_word</a> from finsh_ops.o(i.OP_bw_word) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[102]">OP_call</a> from finsh_ops.o(i.OP_call) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[dd]">OP_div_byte</a> from finsh_ops.o(i.OP_div_byte) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[df]">OP_div_dword</a> from finsh_ops.o(i.OP_div_dword) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[de]">OP_div_word</a> from finsh_ops.o(i.OP_div_word) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[f8]">OP_ld_byte</a> from finsh_ops.o(i.OP_ld_byte) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[fa]">OP_ld_dword</a> from finsh_ops.o(i.OP_ld_dword) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[fb]">OP_ld_value_byte</a> from finsh_ops.o(i.OP_ld_value_byte) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[103]">OP_ld_value_byte_stack</a> from finsh_ops.o(i.OP_ld_value_byte_stack) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[fd]">OP_ld_value_dword</a> from finsh_ops.o(i.OP_ld_value_dword) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[105]">OP_ld_value_dword_stack</a> from finsh_ops.o(i.OP_ld_value_dword_stack) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[fc]">OP_ld_value_word</a> from finsh_ops.o(i.OP_ld_value_word) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[104]">OP_ld_value_word_stack</a> from finsh_ops.o(i.OP_ld_value_word_stack) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[f9]">OP_ld_word</a> from finsh_ops.o(i.OP_ld_word) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[e0]">OP_mod_byte</a> from finsh_ops.o(i.OP_mod_byte) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[e2]">OP_mod_dword</a> from finsh_ops.o(i.OP_mod_dword) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[e1]">OP_mod_word</a> from finsh_ops.o(i.OP_mod_word) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[e3]">OP_mul_byte</a> from finsh_ops.o(i.OP_mul_byte) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[e5]">OP_mul_dword</a> from finsh_ops.o(i.OP_mul_dword) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[e4]">OP_mul_word</a> from finsh_ops.o(i.OP_mul_word) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[d6]">OP_no_op</a> from finsh_ops.o(i.OP_no_op) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[e9]">OP_or_byte</a> from finsh_ops.o(i.OP_or_byte) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[eb]">OP_or_dword</a> from finsh_ops.o(i.OP_or_dword) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[ea]">OP_or_word</a> from finsh_ops.o(i.OP_or_word) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[101]">OP_pop</a> from finsh_ops.o(i.OP_pop) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[f2]">OP_shl_byte</a> from finsh_ops.o(i.OP_shl_byte) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[f4]">OP_shl_dword</a> from finsh_ops.o(i.OP_shl_dword) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[f3]">OP_shl_word</a> from finsh_ops.o(i.OP_shl_word) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[f5]">OP_shr_byte</a> from finsh_ops.o(i.OP_shr_byte) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[f7]">OP_shr_dword</a> from finsh_ops.o(i.OP_shr_dword) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[f6]">OP_shr_word</a> from finsh_ops.o(i.OP_shr_word) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[fe]">OP_st_byte</a> from finsh_ops.o(i.OP_st_byte) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[100]">OP_st_dword</a> from finsh_ops.o(i.OP_st_dword) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[ff]">OP_st_word</a> from finsh_ops.o(i.OP_st_word) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[da]">OP_sub_byte</a> from finsh_ops.o(i.OP_sub_byte) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[dc]">OP_sub_dword</a> from finsh_ops.o(i.OP_sub_dword) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[db]">OP_sub_word</a> from finsh_ops.o(i.OP_sub_word) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[ec]">OP_xor_byte</a> from finsh_ops.o(i.OP_xor_byte) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[ee]">OP_xor_dword</a> from finsh_ops.o(i.OP_xor_dword) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[ed]">OP_xor_word</a> from finsh_ops.o(i.OP_xor_word) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[74]">OTG_FS_IRQHandler</a> from usb_it.o(i.OTG_FS_IRQHandler) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[5b]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[7c]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[7b]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[7e]">OTG_HS_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[7d]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[32]">PVD_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[2f]">PendSV_Handler</a> from context_rvds.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[36]">RCC_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[5a]">RTC_Alarm_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[34]">RTC_WKUP_IRQHandler</a> from rtc.o(i.RTC_WKUP_IRQHandler) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[27]">Reset_Handler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[62]">SDIO_IRQHandler</a> from sdio_sd.o(i.SDIO_IRQHandler) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[54]">SPI1_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[55]">SPI2_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[64]">SPI3_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[9]">STORAGE_GetCapacity</a> from usbd_storage_msd.o(i.STORAGE_GetCapacity) referenced 2 times from usbd_storage_msd.o(.data)
 <LI><a href="#[e]">STORAGE_GetMaxLun</a> from usbd_storage_msd.o(i.STORAGE_GetMaxLun) referenced 2 times from usbd_storage_msd.o(.data)
 <LI><a href="#[8]">STORAGE_Init</a> from usbd_storage_msd.o(i.STORAGE_Init) referenced 2 times from usbd_storage_msd.o(.data)
 <LI><a href="#[a]">STORAGE_IsReady</a> from usbd_storage_msd.o(i.STORAGE_IsReady) referenced 2 times from usbd_storage_msd.o(.data)
 <LI><a href="#[b]">STORAGE_IsWriteProtected</a> from usbd_storage_msd.o(i.STORAGE_IsWriteProtected) referenced 2 times from usbd_storage_msd.o(.data)
 <LI><a href="#[c]">STORAGE_Read</a> from usbd_storage_msd.o(i.STORAGE_Read) referenced 2 times from usbd_storage_msd.o(.data)
 <LI><a href="#[d]">STORAGE_Write</a> from usbd_storage_msd.o(i.STORAGE_Write) referenced 2 times from usbd_storage_msd.o(.data)
 <LI><a href="#[2d]">SVC_Handler</a> from stm32f4xx_it.o(i.SVC_Handler) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[30]">SysTick_Handler</a> from board.o(i.SysTick_Handler) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[84]">SystemInit</a> from system_stm32f4xx.o(i.SystemInit) referenced from startup_stm32f4xx.o(.text)
 <LI><a href="#[33]">TAMP_STAMP_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[49]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[4c]">TIM1_CC_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[4b]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[4a]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[4d]">TIM2_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[4e]">TIM3_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[4f]">TIM4_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[63]">TIM5_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[67]">TIM6_DAC_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[68]">TIM7_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[5c]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[5f]">TIM8_CC_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[5e]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[5d]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[65]">UART4_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[66]">UART5_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[56]">USART1_IRQHandler</a> from usart.o(i.USART1_IRQHandler) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[57]">USART2_IRQHandler</a> from usart.o(i.USART2_IRQHandler) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[58]">USART3_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[78]">USART6_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[17]">USBD_DataInStage</a> from usbd_core.o(i.USBD_DataInStage) referenced 2 times from usbd_core.o(.data)
 <LI><a href="#[16]">USBD_DataOutStage</a> from usbd_core.o(i.USBD_DataOutStage) referenced 2 times from usbd_core.o(.data)
 <LI><a href="#[1f]">USBD_DevConnected</a> from usbd_core.o(i.USBD_DevConnected) referenced 2 times from usbd_core.o(.data)
 <LI><a href="#[20]">USBD_DevDisconnected</a> from usbd_core.o(i.USBD_DevDisconnected) referenced 2 times from usbd_core.o(.data)
 <LI><a href="#[1d]">USBD_IsoINIncomplete</a> from usbd_core.o(i.USBD_IsoINIncomplete) referenced 2 times from usbd_core.o(.data)
 <LI><a href="#[1e]">USBD_IsoOUTIncomplete</a> from usbd_core.o(i.USBD_IsoOUTIncomplete) referenced 2 times from usbd_core.o(.data)
 <LI><a href="#[24]">USBD_MSC_DataIn</a> from usbd_msc_core.o(i.USBD_MSC_DataIn) referenced 2 times from usbd_msc_core.o(.data)
 <LI><a href="#[25]">USBD_MSC_DataOut</a> from usbd_msc_core.o(i.USBD_MSC_DataOut) referenced 2 times from usbd_msc_core.o(.data)
 <LI><a href="#[22]">USBD_MSC_DeInit</a> from usbd_msc_core.o(i.USBD_MSC_DeInit) referenced 2 times from usbd_msc_core.o(.data)
 <LI><a href="#[26]">USBD_MSC_GetCfgDesc</a> from usbd_msc_core.o(i.USBD_MSC_GetCfgDesc) referenced 2 times from usbd_msc_core.o(.data)
 <LI><a href="#[21]">USBD_MSC_Init</a> from usbd_msc_core.o(i.USBD_MSC_Init) referenced 2 times from usbd_msc_core.o(.data)
 <LI><a href="#[23]">USBD_MSC_Setup</a> from usbd_msc_core.o(i.USBD_MSC_Setup) referenced 2 times from usbd_msc_core.o(.data)
 <LI><a href="#[1a]">USBD_Reset</a> from usbd_core.o(i.USBD_Reset) referenced 2 times from usbd_core.o(.data)
 <LI><a href="#[1c]">USBD_Resume</a> from usbd_core.o(i.USBD_Resume) referenced 2 times from usbd_core.o(.data)
 <LI><a href="#[19]">USBD_SOF</a> from usbd_core.o(i.USBD_SOF) referenced 2 times from usbd_core.o(.data)
 <LI><a href="#[18]">USBD_SetupStage</a> from usbd_core.o(i.USBD_SetupStage) referenced 2 times from usbd_core.o(.data)
 <LI><a href="#[1b]">USBD_Suspend</a> from usbd_core.o(i.USBD_Suspend) referenced 2 times from usbd_core.o(.data)
 <LI><a href="#[6]">USBD_USR_ConfigStrDescriptor</a> from usbd_desc.o(i.USBD_USR_ConfigStrDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[11]">USBD_USR_DeviceConfigured</a> from usbd_usr.o(i.USBD_USR_DeviceConfigured) referenced 2 times from usbd_usr.o(.data)
 <LI><a href="#[14]">USBD_USR_DeviceConnected</a> from usbd_usr.o(i.USBD_USR_DeviceConnected) referenced 2 times from usbd_usr.o(.data)
 <LI><a href="#[1]">USBD_USR_DeviceDescriptor</a> from usbd_desc.o(i.USBD_USR_DeviceDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[15]">USBD_USR_DeviceDisconnected</a> from usbd_usr.o(i.USBD_USR_DeviceDisconnected) referenced 2 times from usbd_usr.o(.data)
 <LI><a href="#[10]">USBD_USR_DeviceReset</a> from usbd_usr.o(i.USBD_USR_DeviceReset) referenced 2 times from usbd_usr.o(.data)
 <LI><a href="#[13]">USBD_USR_DeviceResumed</a> from usbd_usr.o(i.USBD_USR_DeviceResumed) referenced 2 times from usbd_usr.o(.data)
 <LI><a href="#[12]">USBD_USR_DeviceSuspended</a> from usbd_usr.o(i.USBD_USR_DeviceSuspended) referenced 2 times from usbd_usr.o(.data)
 <LI><a href="#[f]">USBD_USR_Init</a> from usbd_usr.o(i.USBD_USR_Init) referenced 2 times from usbd_usr.o(.data)
 <LI><a href="#[7]">USBD_USR_InterfaceStrDescriptor</a> from usbd_desc.o(i.USBD_USR_InterfaceStrDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[2]">USBD_USR_LangIDStrDescriptor</a> from usbd_desc.o(i.USBD_USR_LangIDStrDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[3]">USBD_USR_ManufacturerStrDescriptor</a> from usbd_desc.o(i.USBD_USR_ManufacturerStrDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[4]">USBD_USR_ProductStrDescriptor</a> from usbd_desc.o(i.USBD_USR_ProductStrDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[5]">USBD_USR_SerialStrDescriptor</a> from usbd_desc.o(i.USBD_USR_SerialStrDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[2c]">UsageFault_Handler</a> from stm32f4xx_it.o(i.UsageFault_Handler) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[31]">WWDG_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[85]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f4xx.o(.text)
 <LI><a href="#[89]">bh1750_check_device</a> from bh1750.o(i.bh1750_check_device) referenced from bh1750.o(i.bh1750_register)
 <LI><a href="#[8d]">bh1750_get_lx</a> from bh1750.o(i.bh1750_get_lx) referenced from bh1750.o(i.bh1750_register)
 <LI><a href="#[8a]">bh1750_init</a> from bh1750.o(i.bh1750_init) referenced from bh1750.o(i.bh1750_register)
 <LI><a href="#[8e]">bh1750_ioctl</a> from bh1750.o(i.bh1750_ioctl) referenced from bh1750.o(i.bh1750_register)
 <LI><a href="#[8b]">bh1750_read_data</a> from bh1750.o(i.bh1750_read_data) referenced from bh1750.o(i.bh1750_register)
 <LI><a href="#[8c]">bh1750_write_cmd</a> from bh1750.o(i.bh1750_write_cmd) referenced from bh1750.o(i.bh1750_register)
 <LI><a href="#[8f]">bmp180_check_device</a> from bmp180.o(i.bmp180_check_device) referenced from bmp180.o(i.bmp180_register)
 <LI><a href="#[90]">bmp180_get_cal_param</a> from bmp180.o(i.bmp180_get_cal_param) referenced from bmp180.o(i.bmp180_register)
 <LI><a href="#[94]">bmp180_get_up</a> from bmp180.o(i.bmp180_get_up) referenced from bmp180.o(i.bmp180_register)
 <LI><a href="#[93]">bmp180_get_ut</a> from bmp180.o(i.bmp180_get_ut) referenced from bmp180.o(i.bmp180_register)
 <LI><a href="#[95]">bmp180_read_data</a> from bmp180.o(i.bmp180_read_data) referenced from bmp180.o(i.bmp180_register)
 <LI><a href="#[91]">bmp180_read_reg</a> from bmp180.o(i.bmp180_read_reg) referenced from bmp180.o(i.bmp180_register)
 <LI><a href="#[92]">bmp180_write_reg</a> from bmp180.o(i.bmp180_write_reg) referenced from bmp180.o(i.bmp180_register)
 <LI><a href="#[96]">cpu_usage_idle_hook</a> from cpuusage.o(i.cpu_usage_idle_hook) referenced from cpuusage.o(i.cpu_usage_init)
 <LI><a href="#[97]">finsh_rx_ind</a> from shell.o(i.finsh_rx_ind) referenced from shell.o(i.finsh_set_device)
 <LI><a href="#[97]">finsh_rx_ind</a> from shell.o(i.finsh_rx_ind) referenced from shell.o(i.finsh_thread_entry)
 <LI><a href="#[98]">finsh_thread_entry</a> from shell.o(i.finsh_thread_entry) referenced from shell.o(i.finsh_system_init)
 <LI><a href="#[107]">hello</a> from cmd.o(i.hello) referenced from cmd.o(FSymTab)
 <LI><a href="#[a0]">i2c_recv_byte</a> from i2c.o(i.i2c_recv_byte) referenced from i2c.o(i.i2c_bus_register)
 <LI><a href="#[a1]">i2c_recv_nbytes</a> from i2c.o(i.i2c_recv_nbytes) referenced from i2c.o(i.i2c_bus_register)
 <LI><a href="#[9b]">i2c_send_ack</a> from i2c.o(i.i2c_send_ack) referenced from i2c.o(i.i2c_bus_register)
 <LI><a href="#[9d]">i2c_send_byte</a> from i2c.o(i.i2c_send_byte) referenced from i2c.o(i.i2c_bus_register)
 <LI><a href="#[9c]">i2c_send_nack</a> from i2c.o(i.i2c_send_nack) referenced from i2c.o(i.i2c_bus_register)
 <LI><a href="#[9e]">i2c_send_nbytes</a> from i2c.o(i.i2c_send_nbytes) referenced from i2c.o(i.i2c_bus_register)
 <LI><a href="#[99]">i2c_start</a> from i2c.o(i.i2c_start) referenced from i2c.o(i.i2c_bus_register)
 <LI><a href="#[9a]">i2c_stop</a> from i2c.o(i.i2c_stop) referenced from i2c.o(i.i2c_bus_register)
 <LI><a href="#[9f]">i2c_wait_ack</a> from i2c.o(i.i2c_wait_ack) referenced from i2c.o(i.i2c_bus_register)
 <LI><a href="#[a2]">is_key_down</a> from key.o(i.is_key_down) referenced from key.o(i.key_register)
 <LI><a href="#[a4]">led_off</a> from led.o(i.led_off) referenced from led.o(i.led_register)
 <LI><a href="#[a3]">led_on</a> from led.o(i.led_on) referenced from led.o(i.led_register)
 <LI><a href="#[a5]">led_toggle</a> from led.o(i.led_toggle) referenced from led.o(i.led_register)
 <LI><a href="#[112]">list</a> from cmd.o(i.list) referenced from cmd.o(FSymTab)
 <LI><a href="#[111]">list_device</a> from cmd.o(i.list_device) referenced from cmd.o(FSymTab)
 <LI><a href="#[10b]">list_event</a> from cmd.o(i.list_event) referenced from cmd.o(FSymTab)
 <LI><a href="#[10d]">list_mailbox</a> from cmd.o(i.list_mailbox) referenced from cmd.o(FSymTab)
 <LI><a href="#[106]">list_mem</a> from mem.o(i.list_mem) referenced from mem.o(FSymTab)
 <LI><a href="#[10f]">list_mempool</a> from cmd.o(i.list_mempool) referenced from cmd.o(FSymTab)
 <LI><a href="#[10e]">list_msgqueue</a> from cmd.o(i.list_msgqueue) referenced from cmd.o(FSymTab)
 <LI><a href="#[10c]">list_mutex</a> from cmd.o(i.list_mutex) referenced from cmd.o(FSymTab)
 <LI><a href="#[10a]">list_sem</a> from cmd.o(i.list_sem) referenced from cmd.o(FSymTab)
 <LI><a href="#[109]">list_thread</a> from cmd.o(i.list_thread) referenced from cmd.o(FSymTab)
 <LI><a href="#[110]">list_timer</a> from cmd.o(i.list_timer) referenced from cmd.o(FSymTab)
 <LI><a href="#[83]">main</a> from startup.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[a6]">mpu6050_check_device</a> from mpu6050.o(i.mpu6050_check_device) referenced from mpu6050.o(i.mpu6050_register)
 <LI><a href="#[a7]">mpu6050_init</a> from mpu6050.o(i.mpu6050_init) referenced from mpu6050.o(i.mpu6050_register)
 <LI><a href="#[a9]">mpu6050_ioctl</a> from mpu6050.o(i.mpu6050_ioctl) referenced from mpu6050.o(i.mpu6050_register)
 <LI><a href="#[a8]">mpu6050_read_data</a> from mpu6050.o(i.mpu6050_read_data) referenced from mpu6050.o(i.mpu6050_register)
 <LI><a href="#[ab]">mpu6050_read_reg</a> from mpu6050.o(i.mpu6050_read_reg) referenced from mpu6050.o(i.mpu6050_register)
 <LI><a href="#[aa]">mpu6050_write_reg</a> from mpu6050.o(i.mpu6050_write_reg) referenced from mpu6050.o(i.mpu6050_register)
 <LI><a href="#[bc]">oled_clear_screen</a> from oled.o(i.oled_clear_screen) referenced from oled.o(i.rt_device_oled_register)
 <LI><a href="#[c2]">oled_display_number</a> from oled.o(i.oled_display_number) referenced from oled.o(i.rt_device_oled_register)
 <LI><a href="#[c1]">oled_display_string</a> from oled.o(i.oled_display_string) referenced from oled.o(i.rt_device_oled_register)
 <LI><a href="#[c0]">oled_draw_bitmap</a> from oled.o(i.oled_draw_bitmap) referenced from oled.o(i.rt_device_oled_register)
 <LI><a href="#[bf]">oled_draw_line</a> from oled.o(i.oled_draw_line) referenced from oled.o(i.rt_device_oled_register)
 <LI><a href="#[be]">oled_draw_point</a> from oled.o(i.oled_draw_point) referenced from oled.o(i.rt_device_oled_register)
 <LI><a href="#[b7]">oled_init</a> from oled.o(i.oled_init) referenced from oled.o(i.rt_device_oled_register)
 <LI><a href="#[bd]">oled_refresh_gram</a> from oled.o(i.oled_refresh_gram) referenced from oled.o(i.rt_device_oled_register)
 <LI><a href="#[bb]">oled_set_contrast</a> from oled.o(i.oled_set_contrast) referenced from oled.o(i.rt_device_oled_register)
 <LI><a href="#[ba]">oled_set_dir</a> from oled.o(i.oled_set_dir) referenced from oled.o(i.rt_device_oled_register)
 <LI><a href="#[b9]">oled_turn_off</a> from oled.o(i.oled_turn_off) referenced from oled.o(i.rt_device_oled_register)
 <LI><a href="#[b8]">oled_turn_on</a> from oled.o(i.oled_turn_on) referenced from oled.o(i.rt_device_oled_register)
 <LI><a href="#[ad]">pin_clr</a> from pin.o(i.pin_clr) referenced from pin.o(i.pin_register)
 <LI><a href="#[ae]">pin_get</a> from pin.o(i.pin_get) referenced from pin.o(i.pin_register)
 <LI><a href="#[ac]">pin_set</a> from pin.o(i.pin_set) referenced from pin.o(i.pin_register)
 <LI><a href="#[88]">record_audio_i2s_dma_rx_callback</a> from audio.o(i.record_audio_i2s_dma_rx_callback) referenced from audio.o(i.audio_set_record_mode)
 <LI><a href="#[b2]">rt_battery_thread_entry</a> from thread_battery.o(i.rt_battery_thread_entry) referenced from application.o(i.rt_application_init)
 <LI><a href="#[b6]">rt_dsp_thread_entry</a> from thread_dsp.o(i.rt_dsp_thread_entry) referenced from application.o(i.rt_application_init)
 <LI><a href="#[b5]">rt_file_thread_entry</a> from thread_file.o(i.rt_file_thread_entry) referenced from application.o(i.rt_application_init)
 <LI><a href="#[af]">rt_key_thread_entry</a> from thread_key.o(i.rt_key_thread_entry) referenced from application.o(i.rt_application_init)
 <LI><a href="#[b0]">rt_mpu_thread_entry</a> from thread_mpu6050.o(i.rt_mpu_thread_entry) referenced from application.o(i.rt_application_init)
 <LI><a href="#[b3]">rt_oled_thread_entry</a> from thread_oled.o(i.rt_oled_thread_entry) referenced from application.o(i.rt_application_init)
 <LI><a href="#[b1]">rt_sensors_thread_entry</a> from thread_sensors.o(i.rt_sensors_thread_entry) referenced from application.o(i.rt_application_init)
 <LI><a href="#[c5]">rt_serial_close</a> from serial.o(i.rt_serial_close) referenced from serial.o(i.rt_hw_serial_register)
 <LI><a href="#[c8]">rt_serial_control</a> from serial.o(i.rt_serial_control) referenced from serial.o(i.rt_hw_serial_register)
 <LI><a href="#[c3]">rt_serial_init</a> from serial.o(i.rt_serial_init) referenced from serial.o(i.rt_hw_serial_register)
 <LI><a href="#[c4]">rt_serial_open</a> from serial.o(i.rt_serial_open) referenced from serial.o(i.rt_hw_serial_register)
 <LI><a href="#[c6]">rt_serial_read</a> from serial.o(i.rt_serial_read) referenced from serial.o(i.rt_hw_serial_register)
 <LI><a href="#[c7]">rt_serial_write</a> from serial.o(i.rt_serial_write) referenced from serial.o(i.rt_hw_serial_register)
 <LI><a href="#[86]">rt_thread_exit</a> from thread.o(i.rt_thread_exit) referenced from thread.o(i._rt_thread_init)
 <LI><a href="#[cb]">rt_thread_idle_entry</a> from idle.o(i.rt_thread_idle_entry) referenced from idle.o(i.rt_thread_idle_init)
 <LI><a href="#[87]">rt_thread_timeout</a> from thread.o(i.rt_thread_timeout) referenced from thread.o(i._rt_thread_init)
 <LI><a href="#[ca]">rt_thread_timer_entry</a> from timer.o(i.rt_thread_timer_entry) referenced from timer.o(i.rt_system_timer_thread_init)
 <LI><a href="#[b4]">rt_wm8978_thread_entry</a> from thread_audio.o(i.rt_wm8978_thread_entry) referenced from application.o(i.rt_application_init)
 <LI><a href="#[cc]">si7021_check_device</a> from si7021.o(i.si7021_check_device) referenced from si7021.o(i.si7021_register)
 <LI><a href="#[cd]">si7021_init</a> from si7021.o(i.si7021_init) referenced from si7021.o(i.si7021_register)
 <LI><a href="#[ce]">si7021_read_data</a> from si7021.o(i.si7021_read_data) referenced from si7021.o(i.si7021_register)
 <LI><a href="#[d2]">stm32_configure</a> from usart.o(i.stm32_configure) referenced from usart.o(.constdata)
 <LI><a href="#[d3]">stm32_control</a> from usart.o(i.stm32_control) referenced from usart.o(.constdata)
 <LI><a href="#[d5]">stm32_getc</a> from usart.o(i.stm32_getc) referenced from usart.o(.constdata)
 <LI><a href="#[d4]">stm32_putc</a> from usart.o(i.stm32_putc) referenced from usart.o(.constdata)
 <LI><a href="#[c9]">timeout</a> from thread_key.o(i.timeout) referenced from thread_key.o(i.rt_key_thread_entry)
 <LI><a href="#[108]">version</a> from cmd.o(i.version) referenced from cmd.o(FSymTab)
 <LI><a href="#[cf]">wm8978_check_device</a> from wm8978.o(i.wm8978_check_device) referenced from wm8978.o(i.wm8978_register)
 <LI><a href="#[d0]">wm8978_init</a> from wm8978.o(i.wm8978_init) referenced from wm8978.o(i.wm8978_register)
 <LI><a href="#[d1]">wm8978_ioctl</a> from wm8978.o(i.wm8978_ioctl) referenced from wm8978.o(i.wm8978_register)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[11a]"></a>arm_bitreversal_32</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, arm_bitreversal2.o(. text))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_cfft_f32
</UL>

<P><STRONG><a name="[3c7]"></a>arm_bitreversal_16</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, arm_bitreversal2.o(. text), UNUSED)

<P><STRONG><a name="[85]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(.text)
</UL>
<P><STRONG><a name="[3c8]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[113]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[133]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[3c9]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[3ca]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[3cb]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[3cc]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[3cd]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[242]"></a>rt_hw_interrupt_disable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_delete
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_create
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_send
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_create
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_peak
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_init
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_done
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_int_rx
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_tx
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_rx
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_yield
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_scheduler_stack_check
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
</UL>

<P><STRONG><a name="[24a]"></a>rt_hw_interrupt_enable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_delete
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_create
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_send
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_create
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_peak
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_init
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_done
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_int_rx
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_tx
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_rx
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_yield
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
</UL>

<P><STRONG><a name="[381]"></a>rt_hw_context_switch</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>

<P><STRONG><a name="[382]"></a>rt_hw_context_switch_interrupt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>

<P><STRONG><a name="[2f]"></a>PendSV_Handler</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[390]"></a>rt_hw_context_switch_to</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_start
</UL>

<P><STRONG><a name="[3ce]"></a>rt_hw_interrupt_thread_switch</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, context_rvds.o(.text), UNUSED)

<P><STRONG><a name="[29]"></a>HardFault_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = HardFault_Handler &rArr; rt_hw_hard_fault_exception &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault_exception
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>CRYP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[312]"></a>arm_cos_f32</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, arm_cos_f32.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hanning
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hamming
</UL>

<P><STRONG><a name="[30c]"></a>arm_cmplx_mag_f32</STRONG> (Thumb, 246 bytes, Stack size 0 bytes, arm_cmplx_mag_f32.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_formant_window
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_entropy_brightness_window
</UL>

<P><STRONG><a name="[116]"></a>arm_cfft_radix8by2_f32</STRONG> (Thumb, 398 bytes, Stack size 32 bytes, arm_cfft_f32.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = arm_cfft_radix8by2_f32 &rArr; arm_radix8_butterfly_f32
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_radix8_butterfly_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_cfft_f32
</UL>

<P><STRONG><a name="[118]"></a>arm_cfft_radix8by4_f32</STRONG> (Thumb, 1098 bytes, Stack size 88 bytes, arm_cfft_f32.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = arm_cfft_radix8by4_f32 &rArr; arm_radix8_butterfly_f32
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_radix8_butterfly_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_cfft_f32
</UL>

<P><STRONG><a name="[119]"></a>arm_cfft_f32</STRONG> (Thumb, 330 bytes, Stack size 24 bytes, arm_cfft_f32.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = arm_cfft_f32 &rArr; arm_cfft_radix8by4_f32 &rArr; arm_radix8_butterfly_f32
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_radix8_butterfly_f32
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_bitreversal_32
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_cfft_radix8by4_f32
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_cfft_radix8by2_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_formant_window
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_entropy_brightness_window
</UL>

<P><STRONG><a name="[117]"></a>arm_radix8_butterfly_f32</STRONG> (Thumb, 1244 bytes, Stack size 124 bytes, arm_cfft_radix8_f32.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = arm_radix8_butterfly_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_cfft_radix8by4_f32
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_cfft_radix8by2_f32
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_cfft_f32
</UL>

<P><STRONG><a name="[11b]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STORAGE_GetCapacity
</UL>

<P><STRONG><a name="[302]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_push_history
</UL>

<P><STRONG><a name="[234]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_device
</UL>

<P><STRONG><a name="[3cf]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[11f]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[3d0]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[3d1]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[11e]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_compiler_run
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_push_history
</UL>

<P><STRONG><a name="[2d6]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_var_init
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_parser_init
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_init
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_heap_init
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_heap_allocate
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_token_init
</UL>

<P><STRONG><a name="[3d2]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[120]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[2e7]"></a>strncpy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_new_string
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_var_insert
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_identifier
</UL>

<P><STRONG><a name="[2e6]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_sysvar_lookup
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_syscall_lookup
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_new_string
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_prefix
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_proc_number
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_next_char
</UL>

<P><STRONG><a name="[2f8]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_sysvar_lookup
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_syscall_lookup
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_match_name
</UL>

<P><STRONG><a name="[2f9]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_var_lookup
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_sysvar_lookup
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_syscall_lookup
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_var_insert
</UL>

<P><STRONG><a name="[121]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_proc_char
</UL>

<P><STRONG><a name="[124]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hanning
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hamming
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
</UL>

<P><STRONG><a name="[128]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_entropy_brightness_window
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pre_filter_window
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
</UL>

<P><STRONG><a name="[129]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hanning
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hamming
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
</UL>

<P><STRONG><a name="[12a]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_battery_thread_entry
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_entropy_brightness_window
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pre_filter_window
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hanning
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hamming
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
</UL>

<P><STRONG><a name="[12b]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_battery_thread_entry
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hanning
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hamming
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
</UL>

<P><STRONG><a name="[12c]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hanning
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hamming
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
</UL>

<P><STRONG><a name="[12d]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_battery_thread_entry
</UL>

<P><STRONG><a name="[12e]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_battery_thread_entry
</UL>

<P><STRONG><a name="[30d]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_formant_window
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_entropy_brightness_window
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pre_filter_window
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hanning
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hamming
</UL>

<P><STRONG><a name="[231]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
</UL>

<P><STRONG><a name="[34b]"></a>__aeabi_cdcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_battery_thread_entry
</UL>

<P><STRONG><a name="[12f]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_formant_window
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_entropy_brightness_window
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pre_filter_window
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hanning
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hamming
</UL>

<P><STRONG><a name="[11d]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[3d3]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[11c]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[3d4]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[125]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[3d5]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[123]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[3d6]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[130]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[3d7]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[127]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[126]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[114]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[3d8]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[131]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[132]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[134]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[3d9]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[3da]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[135]"></a>ADC_Cmd</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, stm32f4xx_adc.o(i.ADC_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = ADC_Cmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_adc_init
</UL>

<P><STRONG><a name="[137]"></a>ADC_CommonInit</STRONG> (Thumb, 342 bytes, Stack size 16 bytes, stm32f4xx_adc.o(i.ADC_CommonInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = ADC_CommonInit &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_adc_init
</UL>

<P><STRONG><a name="[138]"></a>ADC_GetConversionValue</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f4xx_adc.o(i.ADC_GetConversionValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = ADC_GetConversionValue &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_battery_adc_val
</UL>

<P><STRONG><a name="[139]"></a>ADC_GetFlagStatus</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, stm32f4xx_adc.o(i.ADC_GetFlagStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = ADC_GetFlagStatus &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_battery_adc_val
</UL>

<P><STRONG><a name="[13a]"></a>ADC_Init</STRONG> (Thumb, 402 bytes, Stack size 24 bytes, stm32f4xx_adc.o(i.ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = ADC_Init &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_adc_init
</UL>

<P><STRONG><a name="[13b]"></a>ADC_RegularChannelConfig</STRONG> (Thumb, 408 bytes, Stack size 32 bytes, stm32f4xx_adc.o(i.ADC_RegularChannelConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = ADC_RegularChannelConfig &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_battery_adc_val
</UL>

<P><STRONG><a name="[13c]"></a>ADC_SoftwareStartConv</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, stm32f4xx_adc.o(i.ADC_SoftwareStartConv))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = ADC_SoftwareStartConv &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_battery_adc_val
</UL>

<P><STRONG><a name="[2b]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[147]"></a>DCD_DevDisconnect</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, usb_dcd.o(i.DCD_DevDisconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DCD_DevDisconnect &rArr; USB_OTG_BSP_mDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_mDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_CloseMassStorage
</UL>

<P><STRONG><a name="[149]"></a>DCD_EP_Close</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, usb_dcd.o(i.DCD_EP_Close))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = DCD_EP_Close &rArr; USB_OTG_EPDeactivate
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EPDeactivate
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_Setup
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_DeInit
</UL>

<P><STRONG><a name="[14b]"></a>DCD_EP_ClrStall</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, usb_dcd.o(i.DCD_EP_ClrStall))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DCD_EP_ClrStall &rArr; USB_OTG_EPClearStall
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EPClearStall
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
</UL>

<P><STRONG><a name="[14d]"></a>DCD_EP_Flush</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, usb_dcd.o(i.DCD_EP_Flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DCD_EP_Flush &rArr; USB_OTG_FlushTxFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_FlushTxFifo
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_FlushRxFifo
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_Setup
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_Init
</UL>

<P><STRONG><a name="[150]"></a>DCD_EP_Open</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, usb_dcd.o(i.DCD_EP_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = DCD_EP_Open &rArr; USB_OTG_EPActivate
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EPActivate
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Reset
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_Setup
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_Init
</UL>

<P><STRONG><a name="[152]"></a>DCD_EP_PrepareRx</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, usb_dcd.o(i.DCD_EP_PrepareRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = DCD_EP_PrepareRx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EPStartXfer
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EP0StartXfer
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlReceiveStatus
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlContinueRx
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Write10
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ProcessWrite
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_SendCSW
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_Reset
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_Init
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_Abort
</UL>

<P><STRONG><a name="[21c]"></a>DCD_EP_SetAddress</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, usb_dcd.o(i.DCD_EP_SetAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DCD_EP_SetAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetAddress
</UL>

<P><STRONG><a name="[155]"></a>DCD_EP_Stall</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, usb_dcd.o(i.DCD_EP_Stall))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DCD_EP_Stall &rArr; USB_OTG_EPSetStall
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EPSetStall
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetupStage
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_CplClrFeature
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_Abort
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
</UL>

<P><STRONG><a name="[157]"></a>DCD_EP_Tx</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, usb_dcd.o(i.DCD_EP_Tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EPStartXfer
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EP0StartXfer
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlContinueSendData
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ProcessRead
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_SendCSW
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_SendData
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
</UL>

<P><STRONG><a name="[166]"></a>DCD_Init</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, usb_dcd.o(i.DCD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = DCD_Init &rArr; USB_OTG_CoreInitDev &rArr; USB_OTG_FlushTxFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_SetCurrentMode
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_SelectCore
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EnableGlobalInt
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_DisableGlobalInt
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInitDev
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInit
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Init
</UL>

<P><STRONG><a name="[3f]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, dma.o(i.DMA1_Stream3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = DMA1_Stream3_IRQHandler &rArr; DMA_GetITStatus &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetITStatus
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, dma.o(i.DMA1_Stream4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = DMA1_Stream4_IRQHandler &rArr; DMA_GetITStatus &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetITStatus
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, sdio_sd.o(i.DMA2_Stream3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = DMA2_Stream3_IRQHandler &rArr; SD_ProcessDMAIRQ &rArr; DMA_ClearFlag &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessDMAIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[173]"></a>DMA_ClearFlag</STRONG> (Thumb, 216 bytes, Stack size 16 bytes, stm32f4xx_dma.o(i.DMA_ClearFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = DMA_ClearFlag &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessDMAIRQ
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_TxConfig
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_RxConfig
</UL>

<P><STRONG><a name="[170]"></a>DMA_ClearITPendingBit</STRONG> (Thumb, 216 bytes, Stack size 16 bytes, stm32f4xx_dma.o(i.DMA_ClearITPendingBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = DMA_ClearITPendingBit &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2s_dma_set_rx_mode
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream4_IRQHandler
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream3_IRQHandler
</UL>

<P><STRONG><a name="[174]"></a>DMA_Cmd</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, stm32f4xx_dma.o(i.DMA_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = DMA_Cmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2s_dma_rx_stop
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2s_dma_rx_start
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_set_record_mode
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_TxConfig
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_RxConfig
</UL>

<P><STRONG><a name="[175]"></a>DMA_DeInit</STRONG> (Thumb, 462 bytes, Stack size 8 bytes, stm32f4xx_dma.o(i.DMA_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = DMA_DeInit &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2s_dma_set_tx_mode
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2s_dma_set_rx_mode
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_TxConfig
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_RxConfig
</UL>

<P><STRONG><a name="[176]"></a>DMA_DoubleBufferModeCmd</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, stm32f4xx_dma.o(i.DMA_DoubleBufferModeCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = DMA_DoubleBufferModeCmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2s_dma_set_tx_mode
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2s_dma_set_rx_mode
</UL>

<P><STRONG><a name="[177]"></a>DMA_DoubleBufferModeConfig</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, stm32f4xx_dma.o(i.DMA_DoubleBufferModeConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = DMA_DoubleBufferModeConfig &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2s_dma_set_tx_mode
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2s_dma_set_rx_mode
</UL>

<P><STRONG><a name="[178]"></a>DMA_FlowControllerConfig</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, stm32f4xx_dma.o(i.DMA_FlowControllerConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = DMA_FlowControllerConfig &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_TxConfig
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_RxConfig
</UL>

<P><STRONG><a name="[179]"></a>DMA_GetCmdStatus</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, stm32f4xx_dma.o(i.DMA_GetCmdStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = DMA_GetCmdStatus &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2s_dma_set_tx_mode
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2s_dma_set_rx_mode
</UL>

<P><STRONG><a name="[16f]"></a>DMA_GetITStatus</STRONG> (Thumb, 498 bytes, Stack size 32 bytes, stm32f4xx_dma.o(i.DMA_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = DMA_GetITStatus &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream4_IRQHandler
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream3_IRQHandler
</UL>

<P><STRONG><a name="[17a]"></a>DMA_ITConfig</STRONG> (Thumb, 238 bytes, Stack size 16 bytes, stm32f4xx_dma.o(i.DMA_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = DMA_ITConfig &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2s_dma_set_tx_mode
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2s_dma_set_rx_mode
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_TxConfig
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_RxConfig
</UL>

<P><STRONG><a name="[17b]"></a>DMA_Init</STRONG> (Thumb, 658 bytes, Stack size 16 bytes, stm32f4xx_dma.o(i.DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = DMA_Init &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2s_dma_set_tx_mode
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2s_dma_set_rx_mode
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_TxConfig
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_RxConfig
</UL>

<P><STRONG><a name="[37]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, key.o(i.EXTI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = EXTI0_IRQHandler &rArr; leave_stop_mode &rArr; mutex_unlock &rArr;  mutex_unlock (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leave_stop_mode
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[17d]"></a>EXTI_ClearITPendingBit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f4xx_exti.o(i.EXTI_ClearITPendingBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = EXTI_ClearITPendingBit &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WKUP_IRQHandler
</UL>

<P><STRONG><a name="[183]"></a>GPIO_Init</STRONG> (Thumb, 342 bytes, Stack size 24 bytes, stm32f4xx_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = GPIO_Init &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_nouse_gpio_an_mode
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_hw_oled_spi_init
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_adc_init
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2s_gpio_config
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_Init
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_init
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_Init
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
</UL>

<P><STRONG><a name="[184]"></a>GPIO_PinAFConfig</STRONG> (Thumb, 338 bytes, Stack size 24 bytes, stm32f4xx_gpio.o(i.GPIO_PinAFConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = GPIO_PinAFConfig &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_hw_oled_spi_init
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2s_gpio_config
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_Init
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_Init
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
</UL>

<P><STRONG><a name="[185]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, stm32f4xx_gpio.o(i.GPIO_ReadInputDataBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = GPIO_ReadInputDataBit &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Detect
</UL>

<P><STRONG><a name="[186]"></a>I2S_Cmd</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32f4xx_spi.o(i.I2S_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = I2S_Cmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2s_set_tx_mode
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2s_set_rx_mode
</UL>

<P><STRONG><a name="[187]"></a>I2S_FullDuplexConfig</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, stm32f4xx_spi.o(i.I2S_FullDuplexConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = I2S_FullDuplexConfig &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2s_set_rx_mode
</UL>

<P><STRONG><a name="[188]"></a>I2S_Init</STRONG> (Thumb, 508 bytes, Stack size 48 bytes, stm32f4xx_spi.o(i.I2S_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = I2S_Init &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2s_set_tx_mode
</UL>

<P><STRONG><a name="[3b3]"></a>IWDG_ReloadCounter</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_iwdg.o(i.IWDG_ReloadCounter))
<BR><BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watchdog_feed
</UL>

<P><STRONG><a name="[190]"></a>MSC_BOT_CplClrFeature</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, usbd_msc_bot.o(i.MSC_BOT_CplClrFeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = MSC_BOT_CplClrFeature &rArr; MSC_BOT_SendCSW &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Stall
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_SendCSW
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_Setup
</UL>

<P><STRONG><a name="[191]"></a>MSC_BOT_DataIn</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, usbd_msc_bot.o(i.MSC_BOT_DataIn))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = MSC_BOT_DataIn &rArr; SCSI_ProcessCmd &rArr; SCSI_Write10 &rArr; SCSI_ProcessWrite &rArr; MSC_BOT_SendCSW &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ProcessCmd
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_SendCSW
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_DataIn
</UL>

<P><STRONG><a name="[192]"></a>MSC_BOT_DataOut</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, usbd_msc_bot.o(i.MSC_BOT_DataOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = MSC_BOT_DataOut &rArr; MSC_BOT_CBW_Decode &rArr; SCSI_ProcessCmd &rArr; SCSI_Write10 &rArr; SCSI_ProcessWrite &rArr; MSC_BOT_SendCSW &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ProcessCmd
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_SendCSW
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_CBW_Decode
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_DataOut
</UL>

<P><STRONG><a name="[211]"></a>MSC_BOT_DeInit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_msc_bot.o(i.MSC_BOT_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_DeInit
</UL>

<P><STRONG><a name="[193]"></a>MSC_BOT_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, usbd_msc_bot.o(i.MSC_BOT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = MSC_BOT_Init &rArr; DCD_EP_PrepareRx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Flush
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_PrepareRx
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_Init
</UL>

<P><STRONG><a name="[194]"></a>MSC_BOT_Reset</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, usbd_msc_bot.o(i.MSC_BOT_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = MSC_BOT_Reset &rArr; DCD_EP_PrepareRx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_PrepareRx
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_Setup
</UL>

<P><STRONG><a name="[18f]"></a>MSC_BOT_SendCSW</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, usbd_msc_bot.o(i.MSC_BOT_SendCSW))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MSC_BOT_SendCSW &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Tx
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_PrepareRx
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ProcessWrite
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_DataOut
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_DataIn
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_CplClrFeature
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_CBW_Decode
</UL>

<P><STRONG><a name="[2a]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[195]"></a>NVIC_Configuration</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, board.o(i.NVIC_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = NVIC_Configuration &rArr; NVIC_SetVectorTable &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetVectorTable
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[199]"></a>NVIC_Init</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = NVIC_Init &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2s_dma_set_tx_mode
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2s_dma_set_rx_mode
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Interrupts_Config
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_EnableInterrupt
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>

<P><STRONG><a name="[197]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, misc.o(i.NVIC_PriorityGroupConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = NVIC_PriorityGroupConfig &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Interrupts_Config
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_EnableInterrupt
</UL>

<P><STRONG><a name="[196]"></a>NVIC_SetVectorTable</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, misc.o(i.NVIC_SetVectorTable))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = NVIC_SetVectorTable &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>

<P><STRONG><a name="[d7]"></a>OP_add_byte</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, finsh_ops.o(i.OP_add_byte))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[d9]"></a>OP_add_dword</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, finsh_ops.o(i.OP_add_dword))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[d8]"></a>OP_add_word</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, finsh_ops.o(i.OP_add_word))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[e6]"></a>OP_and_byte</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, finsh_ops.o(i.OP_and_byte))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[e8]"></a>OP_and_dword</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, finsh_ops.o(i.OP_and_dword))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[e7]"></a>OP_and_word</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, finsh_ops.o(i.OP_and_word))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[ef]"></a>OP_bw_byte</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, finsh_ops.o(i.OP_bw_byte))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[f1]"></a>OP_bw_dword</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, finsh_ops.o(i.OP_bw_dword))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[f0]"></a>OP_bw_word</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, finsh_ops.o(i.OP_bw_word))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[102]"></a>OP_call</STRONG> (Thumb, 898 bytes, Stack size 152 bytes, finsh_ops.o(i.OP_call))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = OP_call
</UL>
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[dd]"></a>OP_div_byte</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, finsh_ops.o(i.OP_div_byte))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[df]"></a>OP_div_dword</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, finsh_ops.o(i.OP_div_dword))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[de]"></a>OP_div_word</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, finsh_ops.o(i.OP_div_word))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[f8]"></a>OP_ld_byte</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, finsh_ops.o(i.OP_ld_byte))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[fa]"></a>OP_ld_dword</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, finsh_ops.o(i.OP_ld_dword))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[fb]"></a>OP_ld_value_byte</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, finsh_ops.o(i.OP_ld_value_byte))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[103]"></a>OP_ld_value_byte_stack</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, finsh_ops.o(i.OP_ld_value_byte_stack))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[fd]"></a>OP_ld_value_dword</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, finsh_ops.o(i.OP_ld_value_dword))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[105]"></a>OP_ld_value_dword_stack</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, finsh_ops.o(i.OP_ld_value_dword_stack))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[fc]"></a>OP_ld_value_word</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, finsh_ops.o(i.OP_ld_value_word))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[104]"></a>OP_ld_value_word_stack</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, finsh_ops.o(i.OP_ld_value_word_stack))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[f9]"></a>OP_ld_word</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, finsh_ops.o(i.OP_ld_word))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[e0]"></a>OP_mod_byte</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, finsh_ops.o(i.OP_mod_byte))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[e2]"></a>OP_mod_dword</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, finsh_ops.o(i.OP_mod_dword))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[e1]"></a>OP_mod_word</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, finsh_ops.o(i.OP_mod_word))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[e3]"></a>OP_mul_byte</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, finsh_ops.o(i.OP_mul_byte))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[e5]"></a>OP_mul_dword</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, finsh_ops.o(i.OP_mul_dword))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[e4]"></a>OP_mul_word</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, finsh_ops.o(i.OP_mul_word))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[d6]"></a>OP_no_op</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, finsh_ops.o(i.OP_no_op))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[e9]"></a>OP_or_byte</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, finsh_ops.o(i.OP_or_byte))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[eb]"></a>OP_or_dword</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, finsh_ops.o(i.OP_or_dword))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[ea]"></a>OP_or_word</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, finsh_ops.o(i.OP_or_word))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[101]"></a>OP_pop</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, finsh_ops.o(i.OP_pop))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[f2]"></a>OP_shl_byte</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, finsh_ops.o(i.OP_shl_byte))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[f4]"></a>OP_shl_dword</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, finsh_ops.o(i.OP_shl_dword))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[f3]"></a>OP_shl_word</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, finsh_ops.o(i.OP_shl_word))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[f5]"></a>OP_shr_byte</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, finsh_ops.o(i.OP_shr_byte))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[f7]"></a>OP_shr_dword</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, finsh_ops.o(i.OP_shr_dword))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[f6]"></a>OP_shr_word</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, finsh_ops.o(i.OP_shr_word))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[fe]"></a>OP_st_byte</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, finsh_ops.o(i.OP_st_byte))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[100]"></a>OP_st_dword</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, finsh_ops.o(i.OP_st_dword))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[ff]"></a>OP_st_word</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, finsh_ops.o(i.OP_st_word))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[da]"></a>OP_sub_byte</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, finsh_ops.o(i.OP_sub_byte))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[dc]"></a>OP_sub_dword</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, finsh_ops.o(i.OP_sub_dword))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[db]"></a>OP_sub_word</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, finsh_ops.o(i.OP_sub_word))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[ec]"></a>OP_xor_byte</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, finsh_ops.o(i.OP_xor_byte))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[ee]"></a>OP_xor_dword</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, finsh_ops.o(i.OP_xor_dword))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[ed]"></a>OP_xor_word</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, finsh_ops.o(i.OP_xor_word))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[74]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usb_it.o(i.OTG_FS_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = OTG_FS_IRQHandler &rArr; USBD_OTG_ISR_Handler &rArr; DCD_HandleInEP_ISR &rArr; DCD_WriteEmptyTxFifo &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OTG_ISR_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[19b]"></a>PWR_BackupAccessCmd</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32f4xx_pwr.o(i.PWR_BackupAccessCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = PWR_BackupAccessCmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_init
</UL>

<P><STRONG><a name="[19c]"></a>RCC_AHB1PeriphClockCmd</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, stm32f4xx_rcc.o(i.RCC_AHB1PeriphClockCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = RCC_AHB1PeriphClockCmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2s_dma_set_tx_mode
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2s_dma_set_rx_mode
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_hw_oled_spi_init
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_adc_init
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2s_gpio_config
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_Init
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_init
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_Init
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[19d]"></a>RCC_AHB2PeriphClockCmd</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, stm32f4xx_rcc.o(i.RCC_AHB2PeriphClockCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = RCC_AHB2PeriphClockCmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_Init
</UL>

<P><STRONG><a name="[19e]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, stm32f4xx_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = RCC_APB1PeriphClockCmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_init
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2s_clock_init
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[19f]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, stm32f4xx_rcc.o(i.RCC_APB1PeriphResetCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = RCC_APB1PeriphResetCmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2s_clock_init
</UL>

<P><STRONG><a name="[1a0]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, stm32f4xx_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = RCC_APB2PeriphClockCmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_hw_oled_spi_init
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_adc_init
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_Init
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_Init
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[1a1]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, stm32f4xx_rcc.o(i.RCC_APB2PeriphResetCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = RCC_APB2PeriphResetCmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_adc_init
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DeInit
</UL>

<P><STRONG><a name="[1f7]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 214 bytes, Stack size 20 bytes, stm32f4xx_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Configuration
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[1a3]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, stm32f4xx_rcc.o(i.RCC_GetFlagStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = RCC_GetFlagStatus &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_init
</UL>

<P><STRONG><a name="[1a4]"></a>RCC_LSEConfig</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, stm32f4xx_rcc.o(i.RCC_LSEConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = RCC_LSEConfig &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_init
</UL>

<P><STRONG><a name="[1a5]"></a>RCC_PLLI2SCmd</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32f4xx_rcc.o(i.RCC_PLLI2SCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = RCC_PLLI2SCmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2s_set_sample_rate
</UL>

<P><STRONG><a name="[1a6]"></a>RCC_PLLI2SConfig</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32f4xx_rcc.o(i.RCC_PLLI2SConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = RCC_PLLI2SConfig &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2s_set_sample_rate
</UL>

<P><STRONG><a name="[1a7]"></a>RCC_RTCCLKCmd</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32f4xx_rcc.o(i.RCC_RTCCLKCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = RCC_RTCCLKCmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_init
</UL>

<P><STRONG><a name="[1a8]"></a>RCC_RTCCLKConfig</STRONG> (Thumb, 260 bytes, Stack size 16 bytes, stm32f4xx_rcc.o(i.RCC_RTCCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = RCC_RTCCLKConfig &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_init
</UL>

<P><STRONG><a name="[1a9]"></a>RTC_ClearFlag</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32f4xx_rtc.o(i.RTC_ClearFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = RTC_ClearFlag &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WKUP_IRQHandler
</UL>

<P><STRONG><a name="[1af]"></a>RTC_EnterInitMode</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, stm32f4xx_rtc.o(i.RTC_EnterInitMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_EnterInitMode
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[1b0]"></a>RTC_ExitInitMode</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(i.RTC_ExitInitMode))
<BR><BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[1aa]"></a>RTC_GetDate</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, stm32f4xx_rtc.o(i.RTC_GetDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = RTC_GetDate &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rtc_info
</UL>

<P><STRONG><a name="[1ac]"></a>RTC_GetFlagStatus</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, stm32f4xx_rtc.o(i.RTC_GetFlagStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = RTC_GetFlagStatus &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WKUP_IRQHandler
</UL>

<P><STRONG><a name="[1ad]"></a>RTC_GetTime</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, stm32f4xx_rtc.o(i.RTC_GetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = RTC_GetTime &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rtc_info
</UL>

<P><STRONG><a name="[1ae]"></a>RTC_Init</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, stm32f4xx_rtc.o(i.RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = RTC_Init &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_init
</UL>

<P><STRONG><a name="[1b1]"></a>RTC_ReadBackupRegister</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, stm32f4xx_rtc.o(i.RTC_ReadBackupRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = RTC_ReadBackupRegister &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_init
</UL>

<P><STRONG><a name="[1b2]"></a>RTC_SetDate</STRONG> (Thumb, 368 bytes, Stack size 24 bytes, stm32f4xx_rtc.o(i.RTC_SetDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = RTC_SetDate &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_set_date
</UL>

<P><STRONG><a name="[1b5]"></a>RTC_SetTime</STRONG> (Thumb, 404 bytes, Stack size 24 bytes, stm32f4xx_rtc.o(i.RTC_SetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = RTC_SetTime &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_set_time
</UL>

<P><STRONG><a name="[34]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, rtc.o(i.RTC_WKUP_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = RTC_WKUP_IRQHandler &rArr; RTC_GetFlagStatus &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watchdog_feed
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetFlagStatus
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[1b4]"></a>RTC_WaitForSynchro</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, stm32f4xx_rtc.o(i.RTC_WaitForSynchro))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_WaitForSynchro
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
</UL>

<P><STRONG><a name="[1b7]"></a>RTC_WriteBackupRegister</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, stm32f4xx_rtc.o(i.RTC_WriteBackupRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = RTC_WriteBackupRegister &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_init
</UL>

<P><STRONG><a name="[1b8]"></a>RTC_init</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, rtc.o(i.RTC_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = RTC_init &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WriteBackupRegister
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ReadBackupRegister
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_RTCCLKConfig
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_RTCCLKCmd
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_LSEConfig
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_BackupAccessCmd
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_set_time
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_set_date
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[1bc]"></a>RTC_set_date</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, rtc.o(i.RTC_set_date))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = RTC_set_date &rArr; RTC_SetDate &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_init
</UL>

<P><STRONG><a name="[1bb]"></a>RTC_set_time</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, rtc.o(i.RTC_set_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = RTC_set_time &rArr; RTC_SetTime &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_init
</UL>

<P><STRONG><a name="[18d]"></a>SCSI_ProcessCmd</STRONG> (Thumb, 210 bytes, Stack size 16 bytes, usbd_msc_scsi.o(i.SCSI_ProcessCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SCSI_ProcessCmd &rArr; SCSI_Write10 &rArr; SCSI_ProcessWrite &rArr; MSC_BOT_SendCSW &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Write10
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Verify10
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_TestUnitReady
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_StartStopUnit
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_RequestSense
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ReadFormatCapacity
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ReadCapacity10
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Read10
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ModeSense6
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ModeSense10
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Inquiry
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_SenseCode
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_DataOut
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_DataIn
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_CBW_Decode
</UL>

<P><STRONG><a name="[18c]"></a>SCSI_SenseCode</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, usbd_msc_scsi.o(i.SCSI_SenseCode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SCSI_SenseCode
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Write10
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Verify10
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_TestUnitReady
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ReadFormatCapacity
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ReadCapacity10
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Read10
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ProcessWrite
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ProcessRead
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_CheckAddressRange
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ProcessCmd
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_CBW_Decode
</UL>

<P><STRONG><a name="[13f]"></a>SDIO_ClearFlag</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f4xx_sdio.o(i.SDIO_ClearFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SDIO_ClearFlag &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WaitWriteOperation
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WaitReadOperation
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp7Error
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp6Error
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp3Error
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp2Error
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdError
</UL>

<P><STRONG><a name="[1ce]"></a>SDIO_ClearITPendingBit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f4xx_sdio.o(i.SDIO_ClearITPendingBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SDIO_ClearITPendingBit &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessIRQSrc
</UL>

<P><STRONG><a name="[1cf]"></a>SDIO_ClockCmd</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32f4xx_sdio.o(i.SDIO_ClockCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SDIO_ClockCmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[1d0]"></a>SDIO_DMACmd</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32f4xx_sdio.o(i.SDIO_DMACmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SDIO_DMACmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
</UL>

<P><STRONG><a name="[180]"></a>SDIO_DataConfig</STRONG> (Thumb, 236 bytes, Stack size 16 bytes, stm32f4xx_sdio.o(i.SDIO_DataConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = SDIO_DataConfig &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
</UL>

<P><STRONG><a name="[1d1]"></a>SDIO_DeInit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f4xx_sdio.o(i.SDIO_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = SDIO_DeInit &rArr; RCC_APB2PeriphResetCmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[141]"></a>SDIO_GetCommandResponse</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(i.SDIO_GetCommandResponse))
<BR><BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp6Error
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>

<P><STRONG><a name="[13e]"></a>SDIO_GetFlagStatus</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, stm32f4xx_sdio.o(i.SDIO_GetFlagStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = SDIO_GetFlagStatus &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdError
</UL>

<P><STRONG><a name="[1d2]"></a>SDIO_GetITStatus</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, stm32f4xx_sdio.o(i.SDIO_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = SDIO_GetITStatus &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessIRQSrc
</UL>

<P><STRONG><a name="[1e4]"></a>SDIO_GetPowerState</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(i.SDIO_GetPowerState))
<BR><BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitializeCards
</UL>

<P><STRONG><a name="[142]"></a>SDIO_GetResponse</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, stm32f4xx_sdio.o(i.SDIO_GetResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = SDIO_GetResponse &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendStatus
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitializeCards
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDEnWideBus
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp6Error
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>

<P><STRONG><a name="[62]"></a>SDIO_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, sdio_sd.o(i.SDIO_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = SDIO_IRQHandler &rArr; SD_ProcessIRQSrc &rArr; SDIO_GetITStatus &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessIRQSrc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[1d4]"></a>SDIO_ITConfig</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, stm32f4xx_sdio.o(i.SDIO_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = SDIO_ITConfig &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessIRQSrc
</UL>

<P><STRONG><a name="[1d5]"></a>SDIO_Init</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, stm32f4xx_sdio.o(i.SDIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = SDIO_Init &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_EnableWideBusOperation
</UL>

<P><STRONG><a name="[1d6]"></a>SDIO_Interrupts_Config</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, sdio_sd.o(i.SDIO_Interrupts_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = SDIO_Interrupts_Config &rArr; NVIC_Init &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[181]"></a>SDIO_ReadData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(i.SDIO_ReadData))
<BR><BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
</UL>

<P><STRONG><a name="[17f]"></a>SDIO_SendCommand</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, stm32f4xx_sdio.o(i.SDIO_SendCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = SDIO_SendCommand &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_StopTransfer
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendStatus
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SelectDeselect
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitializeCards
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDEnWideBus
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
</UL>

<P><STRONG><a name="[1d7]"></a>SDIO_SetPowerState</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32f4xx_sdio.o(i.SDIO_SetPowerState))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SDIO_SetPowerState &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[1d8]"></a>SD_Detect</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, sdio_sd.o(i.SD_Detect))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = SD_Detect &rArr; GPIO_ReadInputDataBit &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetState
</UL>

<P><STRONG><a name="[1d9]"></a>SD_EnableWideBusOperation</STRONG> (Thumb, 294 bytes, Stack size 16 bytes, sdio_sd.o(i.SD_EnableWideBusOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; mutex_unlock &rArr;  mutex_unlock (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDEnWideBus
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[1e2]"></a>SD_GetCardInfo</STRONG> (Thumb, 762 bytes, Stack size 20 bytes, sdio_sd.o(i.SD_GetCardInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SD_GetCardInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STORAGE_GetCapacity
</UL>

<P><STRONG><a name="[1da]"></a>SD_GetState</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, sdio_sd.o(i.SD_GetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = SD_GetState &rArr; SD_SendStatus &rArr; CmdResp1Error &rArr; SDIO_GetResponse &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendStatus
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Detect
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetStatus
</UL>

<P><STRONG><a name="[1dc]"></a>SD_GetStatus</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, sdio_sd.o(i.SD_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = SD_GetStatus &rArr; SD_GetState &rArr; SD_SendStatus &rArr; CmdResp1Error &rArr; SDIO_GetResponse &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetState
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STORAGE_Write
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STORAGE_Read
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STORAGE_IsReady
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STORAGE_GetCapacity
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>

<P><STRONG><a name="[1dd]"></a>SD_Init</STRONG> (Thumb, 380 bytes, Stack size 8 bytes, sdio_sd.o(i.SD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; mutex_unlock &rArr;  mutex_unlock (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DeInit
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SelectDeselect
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_Init
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitializeCards
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetCardInfo
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_EnableWideBusOperation
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Interrupts_Config
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_err_info
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STORAGE_IsReady
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STORAGE_Init
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_disk_initialize
</UL>

<P><STRONG><a name="[1e1]"></a>SD_InitializeCards</STRONG> (Thumb, 294 bytes, Stack size 16 bytes, sdio_sd.o(i.SD_InitializeCards))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = SD_InitializeCards &rArr; CmdResp6Error &rArr; SDIO_GetResponse &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp6Error
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp2Error
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetPowerState
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[1e5]"></a>SD_LowLevel_DMA_RxConfig</STRONG> (Thumb, 136 bytes, Stack size 72 bytes, sdio_sd.o(i.SD_LowLevel_DMA_RxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = SD_LowLevel_DMA_RxConfig &rArr; DMA_Cmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_FlowControllerConfig
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
</UL>

<P><STRONG><a name="[1e6]"></a>SD_LowLevel_DMA_TxConfig</STRONG> (Thumb, 136 bytes, Stack size 72 bytes, sdio_sd.o(i.SD_LowLevel_DMA_TxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = SD_LowLevel_DMA_TxConfig &rArr; DMA_Cmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_FlowControllerConfig
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
</UL>

<P><STRONG><a name="[1de]"></a>SD_LowLevel_Init</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, sdio_sd.o(i.SD_LowLevel_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = SD_LowLevel_Init &rArr; GPIO_Init &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[1df]"></a>SD_PowerON</STRONG> (Thumb, 400 bytes, Stack size 24 bytes, sdio_sd.o(i.SD_PowerON))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = SD_PowerON &rArr; CmdResp1Error &rArr; SDIO_GetResponse &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClockCmd
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp7Error
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp3Error
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdError
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SetPowerState
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Init
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[172]"></a>SD_ProcessDMAIRQ</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, sdio_sd.o(i.SD_ProcessDMAIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = SD_ProcessDMAIRQ &rArr; DMA_ClearFlag &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream3_IRQHandler
</UL>

<P><STRONG><a name="[1d3]"></a>SD_ProcessIRQSrc</STRONG> (Thumb, 160 bytes, Stack size 8 bytes, sdio_sd.o(i.SD_ProcessIRQSrc))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = SD_ProcessIRQSrc &rArr; SDIO_GetITStatus &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetITStatus
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearITPendingBit
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_IRQHandler
</UL>

<P><STRONG><a name="[1e7]"></a>SD_ReadBlock</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, sdio_sd.o(i.SD_ReadBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = SD_ReadBlock &rArr; SD_LowLevel_DMA_RxConfig &rArr; DMA_Cmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DataConfig
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DMACmd
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_RxConfig
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>

<P><STRONG><a name="[1e8]"></a>SD_ReadMultiBlocks</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, sdio_sd.o(i.SD_ReadMultiBlocks))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = SD_ReadMultiBlocks &rArr; SD_LowLevel_DMA_RxConfig &rArr; DMA_Cmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DataConfig
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DMACmd
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_RxConfig
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STORAGE_Read
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>

<P><STRONG><a name="[1e3]"></a>SD_SelectDeselect</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, sdio_sd.o(i.SD_SelectDeselect))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = SD_SelectDeselect &rArr; CmdResp1Error &rArr; SDIO_GetResponse &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[1db]"></a>SD_SendStatus</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, sdio_sd.o(i.SD_SendStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = SD_SendStatus &rArr; CmdResp1Error &rArr; SDIO_GetResponse &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetState
</UL>

<P><STRONG><a name="[1e9]"></a>SD_StopTransfer</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, sdio_sd.o(i.SD_StopTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = SD_StopTransfer &rArr; CmdResp1Error &rArr; SDIO_GetResponse &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WaitWriteOperation
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WaitReadOperation
</UL>

<P><STRONG><a name="[1ea]"></a>SD_WaitReadOperation</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, sdio_sd.o(i.SD_WaitReadOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = SD_WaitReadOperation &rArr; SD_StopTransfer &rArr; CmdResp1Error &rArr; SDIO_GetResponse &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_StopTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STORAGE_Read
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>

<P><STRONG><a name="[1eb]"></a>SD_WaitWriteOperation</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, sdio_sd.o(i.SD_WaitWriteOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = SD_WaitWriteOperation &rArr; SD_StopTransfer &rArr; CmdResp1Error &rArr; SDIO_GetResponse &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_StopTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STORAGE_Write
</UL>

<P><STRONG><a name="[1ec]"></a>SD_WriteBlock</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, sdio_sd.o(i.SD_WriteBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = SD_WriteBlock &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_Cmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DataConfig
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DMACmd
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_TxConfig
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>

<P><STRONG><a name="[1ed]"></a>SD_WriteMultiBlocks</STRONG> (Thumb, 294 bytes, Stack size 24 bytes, sdio_sd.o(i.SD_WriteMultiBlocks))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_Cmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DataConfig
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DMACmd
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_TxConfig
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STORAGE_Write
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>

<P><STRONG><a name="[1ee]"></a>SD_disk_initialize</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, diskio.o(i.SD_disk_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = SD_disk_initialize &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; mutex_unlock &rArr;  mutex_unlock (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>

<P><STRONG><a name="[1ef]"></a>SPI_Cmd</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, stm32f4xx_spi.o(i.SPI_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = SPI_Cmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_hw_oled_spi_init
</UL>

<P><STRONG><a name="[1f0]"></a>SPI_I2S_DMACmd</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, stm32f4xx_spi.o(i.SPI_I2S_DMACmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = SPI_I2S_DMACmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2s_set_tx_mode
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2s_set_rx_mode
</UL>

<P><STRONG><a name="[1f1]"></a>SPI_I2S_GetFlagStatus</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, stm32f4xx_spi.o(i.SPI_I2S_GetFlagStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = SPI_I2S_GetFlagStatus &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_send_byte
</UL>

<P><STRONG><a name="[1f2]"></a>SPI_I2S_ReceiveData</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, stm32f4xx_spi.o(i.SPI_I2S_ReceiveData))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SPI_I2S_ReceiveData &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_send_byte
</UL>

<P><STRONG><a name="[1f3]"></a>SPI_I2S_SendData</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stm32f4xx_spi.o(i.SPI_I2S_SendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = SPI_I2S_SendData &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_send_byte
</UL>

<P><STRONG><a name="[1f4]"></a>SPI_Init</STRONG> (Thumb, 348 bytes, Stack size 16 bytes, stm32f4xx_spi.o(i.SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = SPI_Init &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_hw_oled_spi_init
</UL>

<P><STRONG><a name="[9]"></a>STORAGE_GetCapacity</STRONG> (Thumb, 60 bytes, Stack size 112 bytes, usbd_storage_msd.o(i.STORAGE_GetCapacity))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = STORAGE_GetCapacity &rArr; SD_GetStatus &rArr; SD_GetState &rArr; SD_SendStatus &rArr; CmdResp1Error &rArr; SDIO_GetResponse &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetStatus
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetCardInfo
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_storage_msd.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>STORAGE_GetMaxLun</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_storage_msd.o(i.STORAGE_GetMaxLun))
<BR>[Address Reference Count : 1]<UL><LI> usbd_storage_msd.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>STORAGE_Init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, usbd_storage_msd.o(i.STORAGE_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = STORAGE_Init &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; mutex_unlock &rArr;  mutex_unlock (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_storage_msd.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>STORAGE_IsReady</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, usbd_storage_msd.o(i.STORAGE_IsReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = STORAGE_IsReady &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; mutex_unlock &rArr;  mutex_unlock (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_storage_msd.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>STORAGE_IsWriteProtected</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbd_storage_msd.o(i.STORAGE_IsWriteProtected))
<BR>[Address Reference Count : 1]<UL><LI> usbd_storage_msd.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>STORAGE_Read</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, usbd_storage_msd.o(i.STORAGE_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = STORAGE_Read &rArr; mutex_unlock &rArr;  mutex_unlock (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WaitReadOperation
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_storage_msd.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>STORAGE_Write</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, usbd_storage_msd.o(i.STORAGE_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = STORAGE_Write &rArr; mutex_unlock &rArr;  mutex_unlock (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WaitWriteOperation
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_storage_msd.o(.data)
</UL>
<P><STRONG><a name="[2d]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[1f5]"></a>SysTick_CLKSourceConfig</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, misc.o(i.SysTick_CLKSourceConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SysTick_CLKSourceConfig &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Configuration
</UL>

<P><STRONG><a name="[1f6]"></a>SysTick_Configuration</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, board.o(i.SysTick_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = SysTick_Configuration &rArr; SysTick_CLKSourceConfig &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_CLKSourceConfig
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[30]"></a>SysTick_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, board.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = SysTick_Handler &rArr; rt_tick_increase &rArr; rt_timer_check &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[34a]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, system_stm32f4xx.o(i.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_key_thread_entry
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_battery_thread_entry
</UL>

<P><STRONG><a name="[84]"></a>SystemInit</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, system_stm32f4xx.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemInit &rArr; SetSysClock
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leave_stop_mode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(.text)
</UL>
<P><STRONG><a name="[56]"></a>USART1_IRQHandler</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, usart.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = USART1_IRQHandler &rArr; rt_hw_serial_isr &rArr; rt_data_queue_pop &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>USART2_IRQHandler</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, usart.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = USART2_IRQHandler &rArr; rt_hw_serial_isr &rArr; rt_data_queue_pop &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[1fc]"></a>USART_ClearITPendingBit</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, stm32f4xx_usart.o(i.USART_ClearITPendingBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = USART_ClearITPendingBit &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[1fd]"></a>USART_Cmd</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, stm32f4xx_usart.o(i.USART_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = USART_Cmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_configure
</UL>

<P><STRONG><a name="[1fa]"></a>USART_GetITStatus</STRONG> (Thumb, 278 bytes, Stack size 32 bytes, stm32f4xx_usart.o(i.USART_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = USART_GetITStatus &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[1fe]"></a>USART_ITConfig</STRONG> (Thumb, 260 bytes, Stack size 32 bytes, stm32f4xx_usart.o(i.USART_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = USART_ITConfig &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_control
</UL>

<P><STRONG><a name="[1ff]"></a>USART_Init</STRONG> (Thumb, 456 bytes, Stack size 48 bytes, stm32f4xx_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = USART_Init &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_configure
</UL>

<P><STRONG><a name="[21f]"></a>USBD_ClrCfg</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, usbd_core.o(i.USBD_ClrCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_ClrCfg
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
</UL>

<P><STRONG><a name="[203]"></a>USBD_CtlContinueRx</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, usbd_ioreq.o(i.USBD_CtlContinueRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = USBD_CtlContinueRx &rArr; DCD_EP_PrepareRx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_PrepareRx
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DataOutStage
</UL>

<P><STRONG><a name="[204]"></a>USBD_CtlContinueSendData</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, usbd_ioreq.o(i.USBD_CtlContinueSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = USBD_CtlContinueSendData &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Tx
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DataInStage
</UL>

<P><STRONG><a name="[202]"></a>USBD_CtlError</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, usbd_req.o(i.USBD_CtlError))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBD_CtlError &rArr; DCD_EP_Stall &rArr; USB_OTG_EPSetStall
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Stall
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EP0_OutStart
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_Setup
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetAddress
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetStatus
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetDescriptor
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetConfig
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ClrFeature
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdItfReq
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[205]"></a>USBD_CtlReceiveStatus</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, usbd_ioreq.o(i.USBD_CtlReceiveStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = USBD_CtlReceiveStatus &rArr; DCD_EP_PrepareRx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EP0_OutStart
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_PrepareRx
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DataInStage
</UL>

<P><STRONG><a name="[206]"></a>USBD_CtlSendData</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, usbd_ioreq.o(i.USBD_CtlSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = USBD_CtlSendData &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Tx
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_Setup
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetStatus
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetDescriptor
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetConfig
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
</UL>

<P><STRONG><a name="[201]"></a>USBD_CtlSendStatus</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, usbd_ioreq.o(i.USBD_CtlSendStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = USBD_CtlSendStatus &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EP0_OutStart
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Tx
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DataOutStage
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetFeature
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetAddress
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ClrFeature
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdItfReq
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
</UL>

<P><STRONG><a name="[20f]"></a>USBD_DeInit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbd_core.o(i.USBD_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Init
</UL>

<P><STRONG><a name="[18b]"></a>USBD_GetRxCount</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usbd_ioreq.o(i.USBD_GetRxCount))
<BR><BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_CBW_Decode
</UL>

<P><STRONG><a name="[20b]"></a>USBD_GetString</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, usbd_req.o(i.USBD_GetString))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_GetString
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetLen
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_USR_SerialStrDescriptor
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_USR_ProductStrDescriptor
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_USR_ManufacturerStrDescriptor
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_USR_InterfaceStrDescriptor
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_USR_ConfigStrDescriptor
</UL>

<P><STRONG><a name="[20d]"></a>USBD_Init</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, usbd_core.o(i.USBD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = USBD_Init &rArr; USB_OTG_BSP_Init &rArr; GPIO_Init &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_Init
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_EnableInterrupt
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_Init
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_OpenMassStorage
</UL>

<P><STRONG><a name="[24]"></a>USBD_MSC_DataIn</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, usbd_msc_core.o(i.USBD_MSC_DataIn))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = USBD_MSC_DataIn &rArr; MSC_BOT_DataIn &rArr; SCSI_ProcessCmd &rArr; SCSI_Write10 &rArr; SCSI_ProcessWrite &rArr; MSC_BOT_SendCSW &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_DataIn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_msc_core.o(.data)
</UL>
<P><STRONG><a name="[25]"></a>USBD_MSC_DataOut</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, usbd_msc_core.o(i.USBD_MSC_DataOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = USBD_MSC_DataOut &rArr; MSC_BOT_DataOut &rArr; MSC_BOT_CBW_Decode &rArr; SCSI_ProcessCmd &rArr; SCSI_Write10 &rArr; SCSI_ProcessWrite &rArr; MSC_BOT_SendCSW &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_DataOut
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_msc_core.o(.data)
</UL>
<P><STRONG><a name="[22]"></a>USBD_MSC_DeInit</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, usbd_msc_core.o(i.USBD_MSC_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = USBD_MSC_DeInit &rArr; DCD_EP_Close &rArr; USB_OTG_EPDeactivate
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Close
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_msc_core.o(.data)
</UL>
<P><STRONG><a name="[26]"></a>USBD_MSC_GetCfgDesc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usbd_msc_core.o(i.USBD_MSC_GetCfgDesc))
<BR>[Address Reference Count : 1]<UL><LI> usbd_msc_core.o(.data)
</UL>
<P><STRONG><a name="[21]"></a>USBD_MSC_Init</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, usbd_msc_core.o(i.USBD_MSC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = USBD_MSC_Init &rArr; MSC_BOT_Init &rArr; DCD_EP_PrepareRx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Open
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_DeInit
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_msc_core.o(.data)
</UL>
<P><STRONG><a name="[23]"></a>USBD_MSC_Setup</STRONG> (Thumb, 276 bytes, Stack size 16 bytes, usbd_msc_core.o(i.USBD_MSC_Setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = USBD_MSC_Setup &rArr; MSC_BOT_CplClrFeature &rArr; MSC_BOT_SendCSW &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Open
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Close
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Flush
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_Reset
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_CplClrFeature
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_msc_core.o(.data)
</UL>
<P><STRONG><a name="[19a]"></a>USBD_OTG_ISR_Handler</STRONG> (Thumb, 256 bytes, Stack size 24 bytes, usb_dcd_int.o(i.USBD_OTG_ISR_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = USBD_OTG_ISR_Handler &rArr; DCD_HandleInEP_ISR &rArr; DCD_WriteEmptyTxFifo &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleEnumDone_ISR
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ReadCoreItr
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_IsDeviceMode
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_SessionRequest_ISR
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_OTG_ISR
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_IsoOUTIncomplete_ISR
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_IsoINIncomplete_ISR
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleUsbReset_ISR
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleUSBSuspend_ISR
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleSof_ISR
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleRxStatusQueueLevel_ISR
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleResume_ISR
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleOutEP_ISR
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleInEP_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTG_FS_IRQHandler
</UL>

<P><STRONG><a name="[221]"></a>USBD_ParseSetupRequest</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, usbd_req.o(i.USBD_ParseSetupRequest))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetupStage
</UL>

<P><STRONG><a name="[21e]"></a>USBD_SetCfg</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, usbd_core.o(i.USBD_SetCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_SetCfg
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
</UL>

<P><STRONG><a name="[222]"></a>USBD_StdDevReq</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, usbd_req.o(i.USBD_StdDevReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = USBD_StdDevReq &rArr; USBD_GetDescriptor &rArr; USBD_CtlSendData &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetFeature
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetAddress
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetStatus
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetDescriptor
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetConfig
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ClrFeature
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetupStage
</UL>

<P><STRONG><a name="[224]"></a>USBD_StdEPReq</STRONG> (Thumb, 344 bytes, Stack size 24 bytes, usbd_req.o(i.USBD_StdEPReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = USBD_StdEPReq &rArr; USBD_CtlSendData &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Stall
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_ClrStall
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetupStage
</UL>

<P><STRONG><a name="[223]"></a>USBD_StdItfReq</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, usbd_req.o(i.USBD_StdItfReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = USBD_StdItfReq &rArr; USBD_CtlSendStatus &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetupStage
</UL>

<P><STRONG><a name="[6]"></a>USBD_USR_ConfigStrDescriptor</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, usbd_desc.o(i.USBD_USR_ConfigStrDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBD_USR_ConfigStrDescriptor &rArr; USBD_GetString
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>USBD_USR_DeviceConfigured</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbd_usr.o(i.USBD_USR_DeviceConfigured))
<BR>[Address Reference Count : 1]<UL><LI> usbd_usr.o(.data)
</UL>
<P><STRONG><a name="[14]"></a>USBD_USR_DeviceConnected</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbd_usr.o(i.USBD_USR_DeviceConnected))
<BR>[Address Reference Count : 1]<UL><LI> usbd_usr.o(.data)
</UL>
<P><STRONG><a name="[1]"></a>USBD_USR_DeviceDescriptor</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usbd_desc.o(i.USBD_USR_DeviceDescriptor))
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[15]"></a>USBD_USR_DeviceDisconnected</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbd_usr.o(i.USBD_USR_DeviceDisconnected))
<BR>[Address Reference Count : 1]<UL><LI> usbd_usr.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>USBD_USR_DeviceReset</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usbd_usr.o(i.USBD_USR_DeviceReset))
<BR>[Address Reference Count : 1]<UL><LI> usbd_usr.o(.data)
</UL>
<P><STRONG><a name="[13]"></a>USBD_USR_DeviceResumed</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbd_usr.o(i.USBD_USR_DeviceResumed))
<BR>[Address Reference Count : 1]<UL><LI> usbd_usr.o(.data)
</UL>
<P><STRONG><a name="[12]"></a>USBD_USR_DeviceSuspended</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbd_usr.o(i.USBD_USR_DeviceSuspended))
<BR>[Address Reference Count : 1]<UL><LI> usbd_usr.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>USBD_USR_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbd_usr.o(i.USBD_USR_Init))
<BR>[Address Reference Count : 1]<UL><LI> usbd_usr.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>USBD_USR_InterfaceStrDescriptor</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, usbd_desc.o(i.USBD_USR_InterfaceStrDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBD_USR_InterfaceStrDescriptor &rArr; USBD_GetString
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[2]"></a>USBD_USR_LangIDStrDescriptor</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usbd_desc.o(i.USBD_USR_LangIDStrDescriptor))
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[3]"></a>USBD_USR_ManufacturerStrDescriptor</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, usbd_desc.o(i.USBD_USR_ManufacturerStrDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBD_USR_ManufacturerStrDescriptor &rArr; USBD_GetString
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>USBD_USR_ProductStrDescriptor</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, usbd_desc.o(i.USBD_USR_ProductStrDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBD_USR_ProductStrDescriptor &rArr; USBD_GetString
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>USBD_USR_SerialStrDescriptor</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, usbd_desc.o(i.USBD_USR_SerialStrDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBD_USR_SerialStrDescriptor &rArr; USBD_GetString
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[210]"></a>USB_OTG_BSP_EnableInterrupt</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, usb_bsp.o(i.USB_OTG_BSP_EnableInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = USB_OTG_BSP_EnableInterrupt &rArr; NVIC_Init &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Init
</UL>

<P><STRONG><a name="[20e]"></a>USB_OTG_BSP_Init</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, usb_bsp.o(i.USB_OTG_BSP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = USB_OTG_BSP_Init &rArr; GPIO_Init &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Init
</UL>

<P><STRONG><a name="[148]"></a>USB_OTG_BSP_mDelay</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usb_bsp.o(i.USB_OTG_BSP_mDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_OTG_BSP_mDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_us_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_DevDisconnect
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_SetCurrentMode
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInit
</UL>

<P><STRONG><a name="[229]"></a>USB_OTG_BSP_uDelay</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usb_bsp.o(i.USB_OTG_BSP_uDelay))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_FlushTxFifo
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_FlushRxFifo
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreReset
</UL>

<P><STRONG><a name="[169]"></a>USB_OTG_CoreInit</STRONG> (Thumb, 282 bytes, Stack size 24 bytes, usb_core.o(i.USB_OTG_CoreInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USB_OTG_CoreInit &rArr; USB_OTG_CoreReset
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_mDelay
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreReset
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_Init
</UL>

<P><STRONG><a name="[16b]"></a>USB_OTG_CoreInitDev</STRONG> (Thumb, 522 bytes, Stack size 48 bytes, usb_core.o(i.USB_OTG_CoreInitDev))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USB_OTG_CoreInitDev &rArr; USB_OTG_FlushTxFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_InitDevSpeed
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_FlushTxFifo
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_FlushRxFifo
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EnableDevInt
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_Init
</UL>

<P><STRONG><a name="[168]"></a>USB_OTG_DisableGlobalInt</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, usb_core.o(i.USB_OTG_DisableGlobalInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_OTG_DisableGlobalInt
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_Init
</UL>

<P><STRONG><a name="[159]"></a>USB_OTG_EP0Activate</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, usb_core.o(i.USB_OTG_EP0Activate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_OTG_EP0Activate
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleEnumDone_ISR
</UL>

<P><STRONG><a name="[153]"></a>USB_OTG_EP0StartXfer</STRONG> (Thumb, 342 bytes, Stack size 32 bytes, usb_core.o(i.USB_OTG_EP0StartXfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USB_OTG_EP0StartXfer
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Tx
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_PrepareRx
</UL>

<P><STRONG><a name="[15e]"></a>USB_OTG_EP0_OutStart</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, usb_core.o(i.USB_OTG_EP0_OutStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_OTG_EP0_OutStart
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlReceiveStatus
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleUsbReset_ISR
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleOutEP_ISR
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleInEP_ISR
</UL>

<P><STRONG><a name="[151]"></a>USB_OTG_EPActivate</STRONG> (Thumb, 152 bytes, Stack size 20 bytes, usb_core.o(i.USB_OTG_EPActivate))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USB_OTG_EPActivate
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Open
</UL>

<P><STRONG><a name="[14c]"></a>USB_OTG_EPClearStall</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, usb_core.o(i.USB_OTG_EPClearStall))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_OTG_EPClearStall
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_ClrStall
</UL>

<P><STRONG><a name="[14a]"></a>USB_OTG_EPDeactivate</STRONG> (Thumb, 94 bytes, Stack size 20 bytes, usb_core.o(i.USB_OTG_EPDeactivate))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USB_OTG_EPDeactivate
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Close
</UL>

<P><STRONG><a name="[156]"></a>USB_OTG_EPSetStall</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, usb_core.o(i.USB_OTG_EPSetStall))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_OTG_EPSetStall
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Stall
</UL>

<P><STRONG><a name="[154]"></a>USB_OTG_EPStartXfer</STRONG> (Thumb, 502 bytes, Stack size 32 bytes, usb_core.o(i.USB_OTG_EPStartXfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_WritePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Tx
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_PrepareRx
</UL>

<P><STRONG><a name="[228]"></a>USB_OTG_EnableDevInt</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, usb_core.o(i.USB_OTG_EnableDevInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_OTG_EnableDevInt &rArr; USB_OTG_EnableCommonInt
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EnableCommonInt
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInitDev
</UL>

<P><STRONG><a name="[16c]"></a>USB_OTG_EnableGlobalInt</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, usb_core.o(i.USB_OTG_EnableGlobalInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_OTG_EnableGlobalInt
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_Init
</UL>

<P><STRONG><a name="[14f]"></a>USB_OTG_FlushRxFifo</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, usb_core.o(i.USB_OTG_FlushRxFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_OTG_FlushRxFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_uDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInitDev
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Flush
</UL>

<P><STRONG><a name="[14e]"></a>USB_OTG_FlushTxFifo</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, usb_core.o(i.USB_OTG_FlushTxFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_OTG_FlushTxFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_uDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInitDev
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Flush
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleUsbReset_ISR
</UL>

<P><STRONG><a name="[15a]"></a>USB_OTG_GetDeviceSpeed</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, usb_core.o(i.USB_OTG_GetDeviceSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_OTG_GetDeviceSpeed
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleEnumDone_ISR
</UL>

<P><STRONG><a name="[22b]"></a>USB_OTG_GetMode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usb_core.o(i.USB_OTG_GetMode))
<BR><BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_IsDeviceMode
</UL>

<P><STRONG><a name="[227]"></a>USB_OTG_InitDevSpeed</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, usb_core.o(i.USB_OTG_InitDevSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_OTG_InitDevSpeed
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInitDev
</UL>

<P><STRONG><a name="[212]"></a>USB_OTG_IsDeviceMode</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, usb_core.o(i.USB_OTG_IsDeviceMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = USB_OTG_IsDeviceMode
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_GetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[213]"></a>USB_OTG_ReadCoreItr</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usb_core.o(i.USB_OTG_ReadCoreItr))
<BR><BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[15c]"></a>USB_OTG_ReadDevAllInEPItr</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usb_core.o(i.USB_OTG_ReadDevAllInEPItr))
<BR><BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleInEP_ISR
</UL>

<P><STRONG><a name="[161]"></a>USB_OTG_ReadDevAllOutEp_itr</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usb_core.o(i.USB_OTG_ReadDevAllOutEp_itr))
<BR><BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleOutEP_ISR
</UL>

<P><STRONG><a name="[162]"></a>USB_OTG_ReadDevOutEP_itr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usb_core.o(i.USB_OTG_ReadDevOutEP_itr))
<BR><BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleOutEP_ISR
</UL>

<P><STRONG><a name="[164]"></a>USB_OTG_ReadPacket</STRONG> (Thumb, 40 bytes, Stack size 20 bytes, usb_core.o(i.USB_OTG_ReadPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USB_OTG_ReadPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleRxStatusQueueLevel_ISR
</UL>

<P><STRONG><a name="[167]"></a>USB_OTG_SelectCore</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, usb_core.o(i.USB_OTG_SelectCore))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_OTG_SelectCore
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_Init
</UL>

<P><STRONG><a name="[16a]"></a>USB_OTG_SetCurrentMode</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, usb_core.o(i.USB_OTG_SetCurrentMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USB_OTG_SetCurrentMode &rArr; USB_OTG_BSP_mDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_mDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_Init
</UL>

<P><STRONG><a name="[16d]"></a>USB_OTG_WritePacket</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, usb_core.o(i.USB_OTG_WritePacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_OTG_WritePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EPStartXfer
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_WriteEmptyTxFifo
</UL>

<P><STRONG><a name="[2c]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[122]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[3db]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[22c]"></a>__hardfp_log</STRONG> (Thumb, 872 bytes, Stack size 88 bytes, log.o(i.__hardfp_log))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = __hardfp_log &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_formant_window
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_entropy_brightness_window
</UL>

<P><STRONG><a name="[232]"></a>__kernel_poly</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
</UL>

<P><STRONG><a name="[230]"></a>__mathlib_dbl_divzero</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_divzero))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __mathlib_dbl_divzero &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
</UL>

<P><STRONG><a name="[22d]"></a>__mathlib_dbl_infnan</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_infnan &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
</UL>

<P><STRONG><a name="[22f]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
</UL>

<P><STRONG><a name="[380]"></a>__rt_ffs</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, kservice.o(i.__rt_ffs))
<BR><BR>[Called By]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_start
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>

<P><STRONG><a name="[3dc]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[3dd]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[3de]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[22e]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
</UL>

<P><STRONG><a name="[136]"></a>assert_failed</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, startup.o(i.assert_failed))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_CLKSourceConfig
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetVectorTable
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SoftwareStartConv
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RegularChannelConfig
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetFlagStatus
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetConversionValue
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_CommonInit
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetITStatus
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DataConfig
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DMACmd
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClockCmd
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearITPendingBit
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_FlowControllerConfig
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_draw_point
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_write_byte
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DMACmd
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLLI2SConfig
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLLI2SCmd
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Init
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_FullDuplexConfig
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Cmd
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetITStatus
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCmdStatus
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DoubleBufferModeConfig
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DoubleBufferModeCmd
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearITPendingBit
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB2PeriphClockCmd
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SetPowerState
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Init
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ITConfig
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WriteBackupRegister
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ReadBackupRegister
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetTime
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetFlagStatus
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetDate
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ClearFlag
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_RTCCLKConfig
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_RTCCLKCmd
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_LSEConfig
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_BackupAccessCmd
</UL>

<P><STRONG><a name="[253]"></a>audio_leave_record_mode</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, audio.o(i.audio_leave_record_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = audio_leave_record_mode &rArr; rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>
<BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_audio_stop
</UL>

<P><STRONG><a name="[255]"></a>audio_set_record_mode</STRONG> (Thumb, 282 bytes, Stack size 16 bytes, audio.o(i.audio_set_record_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = audio_set_record_mode &rArr; i2s_set_sample_rate &rArr; mutex_unlock &rArr;  mutex_unlock (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wavhead_encode
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2s_set_tx_mode
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2s_set_sample_rate
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2s_set_rx_mode
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2s_dma_set_tx_mode
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2s_dma_set_rx_mode
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_start_recording
</UL>

<P><STRONG><a name="[262]"></a>battery_adc_init</STRONG> (Thumb, 124 bytes, Stack size 56 bytes, battery.o(i.battery_adc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = battery_adc_init &rArr; GPIO_Init &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_CommonInit
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[89]"></a>bh1750_check_device</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, bh1750.o(i.bh1750_check_device))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = bh1750_check_device &rArr; mutex_unlock &rArr;  mutex_unlock (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bh1750.o(i.bh1750_register)
</UL>
<P><STRONG><a name="[8d]"></a>bh1750_get_lx</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, bh1750.o(i.bh1750_get_lx))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = bh1750_get_lx &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bh1750.o(i.bh1750_register)
</UL>
<P><STRONG><a name="[8a]"></a>bh1750_init</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, bh1750.o(i.bh1750_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = bh1750_init &rArr; mutex_unlock &rArr;  mutex_unlock (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bh1750.o(i.bh1750_register)
</UL>
<P><STRONG><a name="[8b]"></a>bh1750_read_data</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, bh1750.o(i.bh1750_read_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = bh1750_read_data &rArr; mutex_unlock &rArr;  mutex_unlock (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bh1750.o(i.bh1750_register)
</UL>
<P><STRONG><a name="[263]"></a>bh1750_register</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, bh1750.o(i.bh1750_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = bh1750_register &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sensors_thread_entry
</UL>

<P><STRONG><a name="[8c]"></a>bh1750_write_cmd</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, bh1750.o(i.bh1750_write_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = bh1750_write_cmd &rArr; mutex_unlock &rArr;  mutex_unlock (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bh1750.o(i.bh1750_register)
</UL>
<P><STRONG><a name="[264]"></a>bmp180_register</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, bmp180.o(i.bmp180_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = bmp180_register &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sensors_thread_entry
</UL>

<P><STRONG><a name="[26e]"></a>close</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, easy_rtthread.o(i.close))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = close &rArr; f_close &rArr; f_sync &rArr; sync_fs &rArr; sync_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_Cmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_sensors_stop
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_mpu_stop
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_dsp_stop
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_audio_stop
</UL>

<P><STRONG><a name="[286]"></a>clust2sect</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ff.o(i.clust2sect))
<BR><BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[274]"></a>cpu_usage_get</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, cpuusage.o(i.cpu_usage_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = cpu_usage_get &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_battery_thread_entry
</UL>

<P><STRONG><a name="[275]"></a>cpu_usage_init</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cpuusage.o(i.cpu_usage_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cpu_usage_init
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_sethook
</UL>
<BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_application_init
</UL>

<P><STRONG><a name="[26c]"></a>disk_initialize</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, diskio.o(i.disk_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = disk_initialize &rArr; SD_disk_initialize &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; mutex_unlock &rArr;  mutex_unlock (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_disk_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
</UL>

<P><STRONG><a name="[3a8]"></a>disk_ioctl</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, diskio.o(i.disk_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = disk_ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
</UL>

<P><STRONG><a name="[266]"></a>disk_read</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, diskio.o(i.disk_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = disk_read &rArr; SD_ReadMultiBlocks &rArr; SD_LowLevel_DMA_RxConfig &rArr; DMA_Cmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WaitReadOperation
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>

<P><STRONG><a name="[26b]"></a>disk_status</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, diskio.o(i.disk_status))
<BR><BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
</UL>

<P><STRONG><a name="[28e]"></a>disk_write</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, diskio.o(i.disk_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_Cmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WaitReadOperation
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
</UL>

<P><STRONG><a name="[37f]"></a>display_bmp180</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, thread_oled.o(i.display_bmp180))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = display_bmp180
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_oled_thread_entry
</UL>

<P><STRONG><a name="[37d]"></a>display_mpu6050</STRONG> (Thumb, 378 bytes, Stack size 24 bytes, thread_oled.o(i.display_mpu6050))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = display_mpu6050
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_oled_thread_entry
</UL>

<P><STRONG><a name="[28f]"></a>display_rtc</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, thread_oled.o(i.display_rtc))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = display_rtc &rArr; get_rtc_info &rArr; RTC_GetTime &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rtc_info
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_oled_thread_entry
</UL>

<P><STRONG><a name="[37e]"></a>display_si7021</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, thread_oled.o(i.display_si7021))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = display_si7021
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_oled_thread_entry
</UL>

<P><STRONG><a name="[2a9]"></a>event_create</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, easy_rtthread.o(i.event_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = event_create &rArr; rt_event_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_create
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_application_init
</UL>

<P><STRONG><a name="[25f]"></a>event_recv</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, easy_rtthread.o(i.event_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = event_recv &rArr; rt_event_recv &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_oled_thread_entry
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_file_thread_entry
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dsp_thread_entry
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_stop_recording
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_start_recording
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensors_stop_recording
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensors_start_recording
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensors_recording
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_stop_recording
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_start_recording
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_recording
</UL>

<P><STRONG><a name="[2ac]"></a>event_recv_timeout</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, easy_rtthread.o(i.event_recv_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = event_recv_timeout &rArr; rt_event_recv &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wm8978_thread_entry
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sensors_thread_entry
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mpu_thread_entry
</UL>

<P><STRONG><a name="[25e]"></a>event_send</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, easy_rtthread.o(i.event_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = event_send &rArr; mutex_unlock &rArr;  mutex_unlock (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_send
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeout
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_audio_i2s_dma_rx_callback
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_key_thread_entry
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_file_thread_entry
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dsp_thread_entry
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feature_start_computing
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feature_init_computing
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feature_continue_computing
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feature_computing
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_stop_recording
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_start_recording
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_sensors_stop
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_sensors_start
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_sensors_event
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_mpu_stop
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_mpu_start
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_mpu_event
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_dsp_write_event
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_dsp_stop
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_dsp_start
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_dsp_read_event
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_audio_stop
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_audio_start
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensors_stop_recording
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensors_start_recording
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensors_recording
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_stop_recording
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_start_recording
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_recording
</UL>

<P><STRONG><a name="[270]"></a>f_close</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, ff.o(i.f_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = f_close &rArr; f_sync &rArr; sync_fs &rArr; sync_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_Cmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dec_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
</UL>

<P><STRONG><a name="[2b0]"></a>f_lseek</STRONG> (Thumb, 430 bytes, Stack size 32 bytes, ff.o(i.f_lseek))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = f_lseek &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_Cmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lseek
</UL>

<P><STRONG><a name="[2b2]"></a>f_mount</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, ff.o(i.f_mount))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = f_mount &rArr; clear_lock
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount
</UL>

<P><STRONG><a name="[2b3]"></a>f_open</STRONG> (Thumb, 416 bytes, Stack size 600 bytes, ff.o(i.f_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 1112<LI>Call Chain = f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_Cmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inc_lock
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enq_lock
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_lock
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
</UL>
<BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
</UL>

<P><STRONG><a name="[2bc]"></a>f_read</STRONG> (Thumb, 458 bytes, Stack size 64 bytes, ff.o(i.f_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = f_read &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_Cmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_read
</UL>

<P><STRONG><a name="[2bd]"></a>f_rename</STRONG> (Thumb, 296 bytes, Stack size 656 bytes, ff.o(i.f_rename))
<BR><BR>[Stack]<UL><LI>Max Depth = 1168<LI>Call Chain = f_rename &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_Cmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rename
</UL>

<P><STRONG><a name="[2ae]"></a>f_sync</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, ff.o(i.f_sync))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = f_sync &rArr; sync_fs &rArr; sync_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_Cmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync
</UL>

<P><STRONG><a name="[2a1]"></a>f_unlink</STRONG> (Thumb, 190 bytes, Stack size 616 bytes, ff.o(i.f_unlink))
<BR><BR>[Stack]<UL><LI>Max Depth = 1120<LI>Call Chain = f_unlink &rArr; chk_mounted &rArr; disk_initialize &rArr; SD_disk_initialize &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; mutex_unlock &rArr;  mutex_unlock (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_dsp_stop
</UL>

<P><STRONG><a name="[2bf]"></a>f_write</STRONG> (Thumb, 524 bytes, Stack size 64 bytes, ff.o(i.f_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = f_write &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_Cmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
</UL>

<P><STRONG><a name="[27b]"></a>ff_convert</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, cc936.o(i.ff_convert))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ff_convert
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[273]"></a>ff_wtoupper</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, cc936.o(i.ff_wtoupper))
<BR><BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_lfn
</UL>

<P><STRONG><a name="[29e]"></a>file_read</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, easy_rtthread.o(i.file_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = file_read &rArr; f_read &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_Cmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_dsp_start
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_dsp_read_event
</UL>

<P><STRONG><a name="[2cb]"></a>finsh_compiler_run</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, finsh_compiler.o(i.finsh_compiler_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = finsh_compiler_run &rArr; finsh_type_check &rArr;  finsh_type_check (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_type_check
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_compile
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_run_line
</UL>

<P><STRONG><a name="[2ee]"></a>finsh_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, finsh_error.o(i.finsh_errno))
<BR><BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_run_line
</UL>

<P><STRONG><a name="[2d0]"></a>finsh_error_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, finsh_error.o(i.finsh_error_init))
<BR><BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_init
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_flush
</UL>

<P><STRONG><a name="[2ca]"></a>finsh_error_set</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, finsh_error.o(i.finsh_error_set))
<BR><BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_new_string
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_new_ptr
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_new_long
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_new_int
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_new_id
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_new_char
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_type_check
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_compile
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_run
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_proc_string
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_proc_char
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_variable_decl
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_type
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_shift_expr
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_primary_expr
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_postfix_expr
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_param_list
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_multiplicative_expr
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_inclusive_or_expr
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_identifier
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_expr_statement
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_exclusive_or_expr
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_cast_expr
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_and_expr
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_additive_expr
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_sys_node
</UL>

<P><STRONG><a name="[2ef]"></a>finsh_error_string</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, finsh_error.o(i.finsh_error_string))
<BR><BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_run_line
</UL>

<P><STRONG><a name="[2cd]"></a>finsh_flush</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, finsh_init.o(i.finsh_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = finsh_flush &rArr; finsh_parser_init
</UL>
<BR>[Calls]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_parser_init
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_init
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_run_line
</UL>

<P><STRONG><a name="[2d1]"></a>finsh_heap_allocate</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, finsh_heap.o(i.finsh_heap_allocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = finsh_heap_allocate &rArr; finsh_heap_gc &rArr; finsh_heap_free &rArr; finsh_block_merge
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_heap_gc
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_block_split
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_block_remove
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_block_insert
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_new_string
</UL>

<P><STRONG><a name="[2d7]"></a>finsh_heap_free</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, finsh_heap.o(i.finsh_heap_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = finsh_heap_free &rArr; finsh_block_merge
</UL>
<BR>[Calls]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_block_remove
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_block_merge
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_block_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_heap_gc
</UL>

<P><STRONG><a name="[2d9]"></a>finsh_heap_init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, finsh_heap.o(i.finsh_heap_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = finsh_heap_init
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_init
</UL>

<P><STRONG><a name="[2da]"></a>finsh_init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, finsh_init.o(i.finsh_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = finsh_init &rArr; finsh_var_init
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_var_init
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_parser_init
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_init
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_heap_init
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_init
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[2dd]"></a>finsh_node_allocate</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, finsh_node.o(i.finsh_node_allocate))
<BR><BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_new_string
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_new_ptr
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_new_long
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_new_int
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_new_id
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_new_char
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_sys_node
</UL>

<P><STRONG><a name="[2cf]"></a>finsh_node_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, finsh_node.o(i.finsh_node_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = finsh_node_init
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_init
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_flush
</UL>

<P><STRONG><a name="[2dc]"></a>finsh_node_new_char</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, finsh_node.o(i.finsh_node_new_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = finsh_node_new_char
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_allocate
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_set
</UL>
<BR>[Called By]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_primary_expr
</UL>

<P><STRONG><a name="[2de]"></a>finsh_node_new_id</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, finsh_node.o(i.finsh_node_new_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = finsh_node_new_id &rArr; finsh_sysvar_lookup &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_var_lookup
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_sysvar_lookup
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_syscall_lookup
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_allocate
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_set
</UL>
<BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_variable_decl
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_primary_expr
</UL>

<P><STRONG><a name="[2e2]"></a>finsh_node_new_int</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, finsh_node.o(i.finsh_node_new_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = finsh_node_new_int
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_allocate
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_set
</UL>
<BR>[Called By]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_primary_expr
</UL>

<P><STRONG><a name="[2e3]"></a>finsh_node_new_long</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, finsh_node.o(i.finsh_node_new_long))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = finsh_node_new_long
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_allocate
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_set
</UL>
<BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_unary_expr
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_primary_expr
</UL>

<P><STRONG><a name="[2e4]"></a>finsh_node_new_ptr</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, finsh_node.o(i.finsh_node_new_ptr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = finsh_node_new_ptr
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_allocate
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_set
</UL>
<BR>[Called By]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_primary_expr
</UL>

<P><STRONG><a name="[2e5]"></a>finsh_node_new_string</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, finsh_node.o(i.finsh_node_new_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = finsh_node_new_string &rArr; finsh_heap_allocate &rArr; finsh_heap_gc &rArr; finsh_heap_free &rArr; finsh_block_merge
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_allocate
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_heap_allocate
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_set
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_primary_expr
</UL>

<P><STRONG><a name="[2ce]"></a>finsh_parser_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, finsh_parser.o(i.finsh_parser_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = finsh_parser_init
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_init
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_flush
</UL>

<P><STRONG><a name="[2e8]"></a>finsh_parser_run</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, finsh_parser.o(i.finsh_parser_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = finsh_parser_run &rArr; proc_variable_decl &rArr; proc_assign_expr &rArr;  proc_assign_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_token_token
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_token_init
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_variable_decl
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_expr_statement
</UL>
<BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_run_line
</UL>

<P><STRONG><a name="[2ed]"></a>finsh_run_line</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, shell.o(i.finsh_run_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = finsh_run_line &rArr; finsh_parser_run &rArr; proc_variable_decl &rArr; proc_assign_expr &rArr;  proc_assign_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_stack_bottom
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_flush
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_string
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_errno
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_compiler_run
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_vm_run
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_parser_run
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[2f3]"></a>finsh_set_device</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, shell.o(i.finsh_set_device))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = finsh_set_device &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_set_rx_indicate
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_close
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[2f1]"></a>finsh_stack_bottom</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, finsh_init.o(i.finsh_stack_bottom))
<BR><BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_run_line
</UL>

<P><STRONG><a name="[2e1]"></a>finsh_syscall_lookup</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, finsh_vm.o(i.finsh_syscall_lookup))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = finsh_syscall_lookup &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_new_id
</UL>

<P><STRONG><a name="[2fb]"></a>finsh_system_function_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, shell.o(i.finsh_system_function_init))
<BR><BR>[Called By]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
</UL>

<P><STRONG><a name="[2fa]"></a>finsh_system_init</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, shell.o(i.finsh_system_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = finsh_system_init &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_var_init
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_function_init
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[2fc]"></a>finsh_system_var_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, shell.o(i.finsh_system_var_init))
<BR><BR>[Called By]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
</UL>

<P><STRONG><a name="[2e0]"></a>finsh_sysvar_lookup</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, finsh_var.o(i.finsh_sysvar_lookup))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = finsh_sysvar_lookup &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_new_id
</UL>

<P><STRONG><a name="[98]"></a>finsh_thread_entry</STRONG> (Thumb, 1518 bytes, Stack size 16 bytes, shell.o(i.finsh_thread_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = finsh_thread_entry &rArr; finsh_run_line &rArr; finsh_parser_run &rArr; proc_variable_decl &rArr; proc_assign_expr &rArr;  proc_assign_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memmove
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_set_rx_indicate
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_console_get_device
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_init
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_run_line
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_push_history
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_handle_history
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_auto_complete
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(i.finsh_system_init)
</UL>
<P><STRONG><a name="[2e9]"></a>finsh_token_init</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, finsh_token.o(i.finsh_token_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = finsh_token_init
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_parser_run
</UL>

<P><STRONG><a name="[2ea]"></a>finsh_token_token</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, finsh_token.o(i.finsh_token_token))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = finsh_token_token &rArr; token_run &rArr; token_proc_number &rArr; token_spec_number
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_run
</UL>
<BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_parser_run
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_variable_decl
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_unary_expr
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_type
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_shift_expr
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_primary_expr
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_postfix_expr
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_param_list
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_multiplicative_expr
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_inclusive_or_expr
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_identifier
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_expr_statement
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_exclusive_or_expr
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_cast_expr
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_assign_expr
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_and_expr
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_additive_expr
</UL>

<P><STRONG><a name="[2db]"></a>finsh_var_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, finsh_var.o(i.finsh_var_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = finsh_var_init
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_init
</UL>

<P><STRONG><a name="[309]"></a>finsh_var_insert</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, finsh_var.o(i.finsh_var_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = finsh_var_insert &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_variable_decl
</UL>

<P><STRONG><a name="[2df]"></a>finsh_var_lookup</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, finsh_var.o(i.finsh_var_lookup))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = finsh_var_lookup &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_new_id
</UL>

<P><STRONG><a name="[2f0]"></a>finsh_vm_run</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, finsh_vm.o(i.finsh_vm_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = finsh_vm_run
</UL>
<BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_run_line
</UL>

<P><STRONG><a name="[28b]"></a>gen_numname</STRONG> (Thumb, 190 bytes, Stack size 40 bytes, ff.o(i.gen_numname))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = gen_numname &rArr; mem_cpy
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[30a]"></a>get_battery_adc_val</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, battery.o(i.get_battery_adc_val))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = get_battery_adc_val &rArr; ADC_RegularChannelConfig &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SoftwareStartConv
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RegularChannelConfig
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetFlagStatus
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetConversionValue
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_battery_thread_entry
</UL>

<P><STRONG><a name="[2c1]"></a>get_energy_window</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, feature.o(i.get_energy_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 1232<LI>Call Chain = get_energy_window &rArr; get_hanning_window &rArr; hanning &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_hanning_window
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feature_computing
</UL>

<P><STRONG><a name="[2c2]"></a>get_entropy_brightness_window</STRONG> (Thumb, 364 bytes, Stack size 80 bytes, feature.o(i.get_entropy_brightness_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = get_entropy_brightness_window &rArr; arm_cfft_f32 &rArr; arm_cfft_radix8by4_f32 &rArr; arm_radix8_butterfly_f32
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_cmplx_mag_f32
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_cfft_f32
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feature_computing
</UL>

<P><STRONG><a name="[278]"></a>get_fat</STRONG> (Thumb, 228 bytes, Stack size 24 bytes, ff.o(i.get_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_Cmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>

<P><STRONG><a name="[2b7]"></a>get_fattime</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, diskio.o(i.get_fattime))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = get_fattime &rArr; get_rtc_info &rArr; RTC_GetTime &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rtc_info
</UL>
<BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[2c3]"></a>get_formant_window</STRONG> (Thumb, 424 bytes, Stack size 40 bytes, feature.o(i.get_formant_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 1256<LI>Call Chain = get_formant_window &rArr; get_hamming_window &rArr; hamming &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_cmplx_mag_f32
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_cfft_f32
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pre_filter_window
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_hamming_window
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feature_computing
</UL>

<P><STRONG><a name="[30f]"></a>get_hamming_window</STRONG> (Thumb, 64 bytes, Stack size 1032 bytes, feature.o(i.get_hamming_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 1216<LI>Call Chain = get_hamming_window &rArr; hamming &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hamming
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_formant_window
</UL>

<P><STRONG><a name="[30b]"></a>get_hanning_window</STRONG> (Thumb, 64 bytes, Stack size 1032 bytes, feature.o(i.get_hanning_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 1216<LI>Call Chain = get_hanning_window &rArr; hanning &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hanning
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_energy_window
</UL>

<P><STRONG><a name="[290]"></a>get_rtc_info</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, rtc.o(i.get_rtc_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = get_rtc_info &rArr; RTC_GetTime &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetTime
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetDate
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_name
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_rtc
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
</UL>

<P><STRONG><a name="[310]"></a>hamming</STRONG> (Thumb, 430 bytes, Stack size 96 bytes, window.o(i.hamming))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = hamming &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_cos_f32
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_hamming_window
</UL>

<P><STRONG><a name="[311]"></a>hanning</STRONG> (Thumb, 430 bytes, Stack size 96 bytes, window.o(i.hanning))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = hanning &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_cos_f32
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_hanning_window
</UL>

<P><STRONG><a name="[107]"></a>hello</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, cmd.o(i.hello))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = hello &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[313]"></a>i2c_bus_register</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, i2c.o(i.i2c_bus_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = i2c_bus_register &rArr; mutex_unlock &rArr;  mutex_unlock (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_register
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wm8978_thread_entry
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sensors_thread_entry
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mpu_thread_entry
</UL>

<P><STRONG><a name="[a0]"></a>i2c_recv_byte</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, i2c.o(i.i2c_recv_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = i2c_recv_byte &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_recv_nbytes
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c.o(i.i2c_bus_register)
</UL>
<P><STRONG><a name="[a1]"></a>i2c_recv_nbytes</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, i2c.o(i.i2c_recv_nbytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = i2c_recv_nbytes &rArr; mutex_unlock &rArr;  mutex_unlock (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_recv_byte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c.o(i.i2c_bus_register)
</UL>
<P><STRONG><a name="[9b]"></a>i2c_send_ack</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, i2c.o(i.i2c_send_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = i2c_send_ack &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_delay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c.o(i.i2c_bus_register)
</UL>
<P><STRONG><a name="[9d]"></a>i2c_send_byte</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, i2c.o(i.i2c_send_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = i2c_send_byte &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_send_nbytes
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c.o(i.i2c_bus_register)
</UL>
<P><STRONG><a name="[9c]"></a>i2c_send_nack</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, i2c.o(i.i2c_send_nack))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = i2c_send_nack &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_delay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c.o(i.i2c_bus_register)
</UL>
<P><STRONG><a name="[9e]"></a>i2c_send_nbytes</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, i2c.o(i.i2c_send_nbytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = i2c_send_nbytes &rArr; mutex_unlock &rArr;  mutex_unlock (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_send_byte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c.o(i.i2c_bus_register)
</UL>
<P><STRONG><a name="[99]"></a>i2c_start</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, i2c.o(i.i2c_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = i2c_start &rArr; mutex_unlock &rArr;  mutex_unlock (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_delay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c.o(i.i2c_bus_register)
</UL>
<P><STRONG><a name="[9a]"></a>i2c_stop</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, i2c.o(i.i2c_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = i2c_stop &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_wait_ack
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c.o(i.i2c_bus_register)
</UL>
<P><STRONG><a name="[9f]"></a>i2c_wait_ack</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, i2c.o(i.i2c_wait_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = i2c_wait_ack &rArr; mutex_unlock &rArr;  mutex_unlock (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_stop
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_delay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c.o(i.i2c_bus_register)
</UL>
<P><STRONG><a name="[317]"></a>i2s_dma_rx_start</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dma.o(i.i2s_dma_rx_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = i2s_dma_rx_start &rArr; DMA_Cmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recorder_start
</UL>

<P><STRONG><a name="[318]"></a>i2s_dma_rx_stop</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dma.o(i.i2s_dma_rx_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = i2s_dma_rx_stop &rArr; DMA_Cmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recorder_stop
</UL>

<P><STRONG><a name="[25c]"></a>i2s_dma_set_rx_mode</STRONG> (Thumb, 166 bytes, Stack size 80 bytes, dma.o(i.i2s_dma_set_rx_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = i2s_dma_set_rx_mode &rArr; NVIC_Init &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCmdStatus
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DoubleBufferModeConfig
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DoubleBufferModeCmd
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_set_record_mode
</UL>

<P><STRONG><a name="[25b]"></a>i2s_dma_set_tx_mode</STRONG> (Thumb, 156 bytes, Stack size 80 bytes, dma.o(i.i2s_dma_set_tx_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = i2s_dma_set_tx_mode &rArr; NVIC_Init &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCmdStatus
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DoubleBufferModeConfig
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DoubleBufferModeCmd
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_set_record_mode
</UL>

<P><STRONG><a name="[319]"></a>i2s_gpio_config</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, i2s.o(i.i2s_gpio_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = i2s_gpio_config &rArr; GPIO_Init &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wm8978_thread_entry
</UL>

<P><STRONG><a name="[259]"></a>i2s_set_rx_mode</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, i2s.o(i.i2s_set_rx_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = i2s_set_rx_mode &rArr; I2S_FullDuplexConfig &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DMACmd
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_FullDuplexConfig
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_set_record_mode
</UL>

<P><STRONG><a name="[25a]"></a>i2s_set_sample_rate</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, i2s.o(i.i2s_set_sample_rate))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = i2s_set_sample_rate &rArr; mutex_unlock &rArr;  mutex_unlock (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLLI2SConfig
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLLI2SCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_set_record_mode
</UL>

<P><STRONG><a name="[258]"></a>i2s_set_tx_mode</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, i2s.o(i.i2s_set_tx_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = i2s_set_tx_mode &rArr; I2S_Init &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DMACmd
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Init
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Cmd
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2s_clock_init
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_set_record_mode
</UL>

<P><STRONG><a name="[a2]"></a>is_key_down</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, key.o(i.is_key_down))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = is_key_down &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> key.o(i.key_register)
</UL>
<P><STRONG><a name="[31a]"></a>key_register</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, key.o(i.key_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = key_register &rArr; mutex_unlock &rArr;  mutex_unlock (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_register
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_key_thread_entry
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_battery_thread_entry
</UL>

<P><STRONG><a name="[36d]"></a>keys_scan</STRONG> (Thumb, 512 bytes, Stack size 16 bytes, key.o(i.keys_scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = keys_scan
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_key_thread_entry
</UL>

<P><STRONG><a name="[17c]"></a>leave_stop_mode</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, lowpower.o(i.leave_stop_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = leave_stop_mode &rArr; mutex_unlock &rArr;  mutex_unlock (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[a4]"></a>led_off</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, led.o(i.led_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = led_off &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> led.o(i.led_register)
</UL>
<P><STRONG><a name="[a3]"></a>led_on</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, led.o(i.led_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = led_on &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> led.o(i.led_register)
</UL>
<P><STRONG><a name="[31c]"></a>led_register</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, led.o(i.led_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = led_register &rArr; mutex_unlock &rArr;  mutex_unlock (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_register
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_battery_thread_entry
</UL>

<P><STRONG><a name="[a5]"></a>led_toggle</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, led.o(i.led_toggle))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = led_toggle &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> led.o(i.led_register)
</UL>
<P><STRONG><a name="[112]"></a>list</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, cmd.o(i.list))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = list &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[111]"></a>list_device</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cmd.o(i.list_device))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = list_device &rArr; _list_device &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_device
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[10b]"></a>list_event</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cmd.o(i.list_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = list_event &rArr; _list_event &rArr; show_wait_queue &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[10d]"></a>list_mailbox</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cmd.o(i.list_mailbox))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = list_mailbox &rArr; _list_mailbox &rArr; show_wait_queue &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_mailbox
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[106]"></a>list_mem</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, mem.o(i.list_mem))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = list_mem &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mem.o(FSymTab)
</UL>
<P><STRONG><a name="[10f]"></a>list_mempool</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cmd.o(i.list_mempool))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = list_mempool &rArr; _list_mempool &rArr; show_wait_queue &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_mempool
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[10e]"></a>list_msgqueue</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cmd.o(i.list_msgqueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = list_msgqueue &rArr; _list_msgqueue &rArr; show_wait_queue &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_msgqueue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[10c]"></a>list_mutex</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cmd.o(i.list_mutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = list_mutex &rArr; _list_mutex &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_mutex
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[31d]"></a>list_prefix</STRONG> (Thumb, 434 bytes, Stack size 40 bytes, cmd.o(i.list_prefix))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = list_prefix &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_is_prefix
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_common
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_auto_complete
</UL>

<P><STRONG><a name="[10a]"></a>list_sem</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cmd.o(i.list_sem))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = list_sem &rArr; _list_sem &rArr; show_wait_queue &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_sem
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[109]"></a>list_thread</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cmd.o(i.list_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_scheduler_stack_check
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault_exception
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[110]"></a>list_timer</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cmd.o(i.list_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = list_timer &rArr; _list_timer &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_timer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[321]"></a>lseek</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, easy_rtthread.o(i.lseek))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = lseek &rArr; f_lseek &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_Cmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wavhead_write_data_size
</UL>

<P><STRONG><a name="[83]"></a>main</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, startup.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = main &rArr; rtthread_startup &rArr; rt_application_init &rArr; thread_create &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[324]"></a>mount</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, easy_rtthread.o(i.mount))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = mount &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[a6]"></a>mpu6050_check_device</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, mpu6050.o(i.mpu6050_check_device))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = mpu6050_check_device &rArr; mutex_unlock &rArr;  mutex_unlock (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mpu6050.o(i.mpu6050_register)
</UL>
<P><STRONG><a name="[a7]"></a>mpu6050_init</STRONG> (Thumb, 550 bytes, Stack size 16 bytes, mpu6050.o(i.mpu6050_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = mpu6050_init &rArr; mutex_unlock &rArr;  mutex_unlock (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mpu6050.o(i.mpu6050_register)
</UL>
<P><STRONG><a name="[a9]"></a>mpu6050_ioctl</STRONG> (Thumb, 334 bytes, Stack size 24 bytes, mpu6050.o(i.mpu6050_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = mpu6050_ioctl &rArr; mpu6050_set_sample_rate &rArr; mutex_unlock &rArr;  mutex_unlock (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050_set_sample_rate
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050_set_lpf
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050_set_gyro_fsr
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050_set_acce_fsr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mpu6050.o(i.mpu6050_register)
</UL>
<P><STRONG><a name="[a8]"></a>mpu6050_read_data</STRONG> (Thumb, 212 bytes, Stack size 16 bytes, mpu6050.o(i.mpu6050_read_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = mpu6050_read_data &rArr; mpu6050_read_raw_data &rArr; mutex_unlock &rArr;  mutex_unlock (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050_read_raw_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mpu6050.o(i.mpu6050_register)
</UL>
<P><STRONG><a name="[329]"></a>mpu6050_read_raw_data</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, mpu6050.o(i.mpu6050_read_raw_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = mpu6050_read_raw_data &rArr; mutex_unlock &rArr;  mutex_unlock (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050_read_data
</UL>

<P><STRONG><a name="[32a]"></a>mpu6050_register</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, mpu6050.o(i.mpu6050_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = mpu6050_register &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mpu_thread_entry
</UL>

<P><STRONG><a name="[32e]"></a>mutex_create</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, easy_rtthread.o(i.mutex_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = mutex_create &rArr; rt_mutex_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_create
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_application_init
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si7021_register
</UL>

<P><STRONG><a name="[1cc]"></a>mutex_lock</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, easy_rtthread.o(i.mutex_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + In Cycle
<LI>Call Chain = mutex_lock &rArr;  mutex_unlock (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_register
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2s_set_sample_rate
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rename
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lseek
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_read
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_send
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_recv_timeout
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_recv
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wm8978_thread_entry
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sensors_thread_entry
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_oled_thread_entry
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mpu_thread_entry
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_key_thread_entry
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_battery_thread_entry
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_create
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_create
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_write_reg
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_set_speaker_volume
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_set_speaker
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_set_output
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_set_mic_gain
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_set_mic
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_set_linein_gain
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_set_input
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_set_i2s_config
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_set_headset_volume
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_set_headset
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_set_eq_3d_dir
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_set_dac
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_set_aux_gain
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_set_adc
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_set_3d
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leave_stop_mode
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feature_stop_computing
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feature_start_computing
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feature_init_computing
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_stop_recording
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_start_recording
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_name
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_sensors_stop
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_sensors_start
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_sensors_event
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_mpu_stop
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_mpu_start
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_mpu_event
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_dsp_stop
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_dsp_start
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_audio_stop
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_audio_start
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensors_stop_recording
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensors_start_recording
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensors_recording
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_register
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bus_register
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_stop_recording
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_start_recording
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_recording
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_EnableWideBusOperation
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_err_info
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDEnWideBus
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_init
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_wait_ack
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_start
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_send_nbytes
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_recv_nbytes
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_ioctl
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_init
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_check_device
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STORAGE_Write
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STORAGE_Read
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STORAGE_Init
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si7021_write_cmd
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si7021_read_reg
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si7021_read_data
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si7021_init
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si7021_get_temperature
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si7021_get_humidity
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si7021_check_device
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050_read_raw_data
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050_read_data
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050_ioctl
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050_init
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050_check_device
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050_write_reg
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050_set_sample_rate
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050_set_lpf
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050_set_gyro_fsr
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050_set_acce_fsr
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050_read_reg
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp180_write_reg
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp180_read_reg
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp180_read_data
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp180_get_ut
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp180_get_up
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp180_get_cal_param
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp180_check_device
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bh1750_write_cmd
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bh1750_read_data
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bh1750_init
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bh1750_check_device
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bh1750_ioctl
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_disk_initialize
</UL>

<P><STRONG><a name="[1cd]"></a>mutex_unlock</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, easy_rtthread.o(i.mutex_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + In Cycle
<LI>Call Chain = mutex_unlock &rArr;  mutex_unlock (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_register
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2s_set_sample_rate
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rename
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lseek
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_read
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_send
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_recv_timeout
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_recv
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wm8978_thread_entry
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sensors_thread_entry
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_oled_thread_entry
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mpu_thread_entry
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_key_thread_entry
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_battery_thread_entry
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_create
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_create
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_write_reg
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_set_speaker_volume
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_set_speaker
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_set_output
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_set_mic_gain
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_set_mic
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_set_linein_gain
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_set_input
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_set_i2s_config
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_set_headset_volume
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_set_headset
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_set_eq_3d_dir
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_set_dac
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_set_aux_gain
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_set_adc
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_set_3d
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leave_stop_mode
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feature_stop_computing
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feature_start_computing
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feature_init_computing
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_stop_recording
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_start_recording
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_name
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_sensors_stop
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_sensors_start
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_sensors_event
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_mpu_stop
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_mpu_start
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_mpu_event
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_dsp_stop
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_dsp_start
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_audio_stop
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_audio_start
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensors_stop_recording
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensors_start_recording
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensors_recording
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_register
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bus_register
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_stop_recording
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_start_recording
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_recording
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_EnableWideBusOperation
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_err_info
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDEnWideBus
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_init
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_wait_ack
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_start
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_send_nbytes
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_recv_nbytes
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_ioctl
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_init
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_check_device
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STORAGE_Write
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STORAGE_Read
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STORAGE_Init
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si7021_write_cmd
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si7021_read_reg
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si7021_read_data
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si7021_init
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si7021_get_temperature
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si7021_get_humidity
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si7021_check_device
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050_read_raw_data
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050_read_data
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050_ioctl
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050_init
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050_check_device
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050_write_reg
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050_set_sample_rate
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050_set_lpf
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050_set_gyro_fsr
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050_set_acce_fsr
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050_read_reg
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp180_write_reg
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp180_read_reg
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp180_read_data
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp180_get_ut
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp180_get_up
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp180_get_cal_param
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp180_check_device
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bh1750_write_cmd
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bh1750_read_data
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bh1750_init
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bh1750_check_device
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bh1750_ioctl
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_disk_initialize
</UL>

<P><STRONG><a name="[bc]"></a>oled_clear_screen</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, oled.o(i.oled_clear_screen))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = oled_clear_screen &rArr; oled_write_byte &rArr; spi_send_byte &rArr; SPI_I2S_SendData &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_display_string
</UL>
<BR>[Address Reference Count : 1]<UL><LI> oled.o(i.rt_device_oled_register)
</UL>
<P><STRONG><a name="[c2]"></a>oled_display_number</STRONG> (Thumb, 146 bytes, Stack size 56 bytes, oled.o(i.oled_display_number))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = oled_display_number &rArr; oled_display_char &rArr; oled_draw_point &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_display_char
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;o_pow
</UL>
<BR>[Address Reference Count : 1]<UL><LI> oled.o(i.rt_device_oled_register)
</UL>
<P><STRONG><a name="[c1]"></a>oled_display_string</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, oled.o(i.oled_display_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = oled_display_string &rArr; oled_display_char &rArr; oled_draw_point &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_clear_screen
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_display_char
</UL>
<BR>[Address Reference Count : 1]<UL><LI> oled.o(i.rt_device_oled_register)
</UL>
<P><STRONG><a name="[c0]"></a>oled_draw_bitmap</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, oled.o(i.oled_draw_bitmap))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = oled_draw_bitmap &rArr; oled_draw_point &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_draw_point
</UL>
<BR>[Address Reference Count : 1]<UL><LI> oled.o(i.rt_device_oled_register)
</UL>
<P><STRONG><a name="[bf]"></a>oled_draw_line</STRONG> (Thumb, 228 bytes, Stack size 64 bytes, oled.o(i.oled_draw_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = oled_draw_line &rArr; oled_draw_point &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_draw_point
</UL>
<BR>[Address Reference Count : 1]<UL><LI> oled.o(i.rt_device_oled_register)
</UL>
<P><STRONG><a name="[be]"></a>oled_draw_point</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, oled.o(i.oled_draw_point))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = oled_draw_point &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_draw_line
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_draw_bitmap
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_display_char
</UL>
<BR>[Address Reference Count : 1]<UL><LI> oled.o(i.rt_device_oled_register)
</UL>
<P><STRONG><a name="[b7]"></a>oled_init</STRONG> (Thumb, 280 bytes, Stack size 8 bytes, oled.o(i.oled_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = oled_init &rArr; mutex_unlock &rArr;  mutex_unlock (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_write_byte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> oled.o(i.rt_device_oled_register)
</UL>
<P><STRONG><a name="[bd]"></a>oled_refresh_gram</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, oled.o(i.oled_refresh_gram))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = oled_refresh_gram &rArr; oled_write_byte &rArr; spi_send_byte &rArr; SPI_I2S_SendData &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_write_byte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> oled.o(i.rt_device_oled_register)
</UL>
<P><STRONG><a name="[bb]"></a>oled_set_contrast</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, oled.o(i.oled_set_contrast))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = oled_set_contrast &rArr; oled_write_byte &rArr; spi_send_byte &rArr; SPI_I2S_SendData &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_write_byte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> oled.o(i.rt_device_oled_register)
</UL>
<P><STRONG><a name="[ba]"></a>oled_set_dir</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, oled.o(i.oled_set_dir))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = oled_set_dir &rArr; oled_write_byte &rArr; spi_send_byte &rArr; SPI_I2S_SendData &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_write_byte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> oled.o(i.rt_device_oled_register)
</UL>
<P><STRONG><a name="[b9]"></a>oled_turn_off</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, oled.o(i.oled_turn_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = oled_turn_off &rArr; oled_write_byte &rArr; spi_send_byte &rArr; SPI_I2S_SendData &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_write_byte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> oled.o(i.rt_device_oled_register)
</UL>
<P><STRONG><a name="[b8]"></a>oled_turn_on</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, oled.o(i.oled_turn_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = oled_turn_on &rArr; oled_write_byte &rArr; spi_send_byte &rArr; SPI_I2S_SendData &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_write_byte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> oled.o(i.rt_device_oled_register)
</UL>
<P><STRONG><a name="[296]"></a>open</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, easy_rtthread.o(i.open))
<BR><BR>[Stack]<UL><LI>Max Depth = 1136<LI>Call Chain = open &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_Cmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_sensors_start
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_mpu_start
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_dsp_start
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_audio_start
</UL>

<P><STRONG><a name="[ad]"></a>pin_clr</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, pin.o(i.pin_clr))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = pin_clr &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pin.o(i.pin_register)
</UL>
<P><STRONG><a name="[ae]"></a>pin_get</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, pin.o(i.pin_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = pin_get &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pin.o(i.pin_register)
</UL>
<P><STRONG><a name="[314]"></a>pin_register</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, pin.o(i.pin_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = pin_register &rArr; pin_init &rArr; GPIO_Init &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_init
</UL>
<BR>[Called By]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_register
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_register
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bus_register
</UL>

<P><STRONG><a name="[ac]"></a>pin_set</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, pin.o(i.pin_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = pin_set &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pin.o(i.pin_register)
</UL>
<P><STRONG><a name="[30e]"></a>pre_filter_window</STRONG> (Thumb, 116 bytes, Stack size 48 bytes, feature.o(i.pre_filter_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = pre_filter_window &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_formant_window
</UL>

<P><STRONG><a name="[279]"></a>put_fat</STRONG> (Thumb, 310 bytes, Stack size 32 bytes, ff.o(i.put_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_Cmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>

<P><STRONG><a name="[88]"></a>record_audio_i2s_dma_rx_callback</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, audio.o(i.record_audio_i2s_dma_rx_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = record_audio_i2s_dma_rx_callback &rArr; event_send &rArr; mutex_unlock &rArr;  mutex_unlock (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> audio.o(i.audio_set_record_mode)
</UL>
<P><STRONG><a name="[298]"></a>recorder_start</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, audio.o(i.recorder_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = recorder_start &rArr; i2s_dma_rx_start &rArr; DMA_Cmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2s_dma_rx_start
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_file_thread_entry
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_audio_start
</UL>

<P><STRONG><a name="[261]"></a>recorder_stop</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, audio.o(i.recorder_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = recorder_stop &rArr; i2s_dma_rx_stop &rArr; DMA_Cmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2s_dma_rx_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_stop_recording
</UL>

<P><STRONG><a name="[29c]"></a>rename</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, easy_rtthread.o(i.rename))
<BR><BR>[Stack]<UL><LI>Max Depth = 1184<LI>Call Chain = rename &rArr; f_rename &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_Cmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_sensors_stop
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_mpu_stop
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_audio_stop
</UL>

<P><STRONG><a name="[347]"></a>rt_application_init</STRONG> (Thumb, 292 bytes, Stack size 24 bytes, application.o(i.rt_application_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = rt_application_init &rArr; thread_create &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_create
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_nouse_gpio_an_mode
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_create
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_create
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_usage_init
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[b2]"></a>rt_battery_thread_entry</STRONG> (Thumb, 396 bytes, Stack size 128 bytes, thread_battery.o(i.rt_battery_thread_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = rt_battery_thread_entry &rArr; key_register &rArr; mutex_unlock &rArr;  mutex_unlock (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_register
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_register
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_battery_adc_val
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_usage_get
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_display
</UL>
<BR>[Address Reference Count : 1]<UL><LI> application.o(i.rt_application_init)
</UL>
<P><STRONG><a name="[34c]"></a>rt_completion_done</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, completion.o(i.rt_completion_done))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = rt_completion_done &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
</UL>

<P><STRONG><a name="[350]"></a>rt_completion_init</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, completion.o(i.rt_completion_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = rt_completion_init &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_open
</UL>

<P><STRONG><a name="[250]"></a>rt_completion_wait</STRONG> (Thumb, 256 bytes, Stack size 40 bytes, completion.o(i.rt_completion_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = rt_completion_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_int_tx
</UL>

<P><STRONG><a name="[300]"></a>rt_console_get_device</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, kservice.o(i.rt_console_get_device))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[356]"></a>rt_console_set_device</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, kservice.o(i.rt_console_set_device))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = rt_console_set_device &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_close
</UL>
<BR>[Called By]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[357]"></a>rt_data_queue_init</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, dataqueue.o(i.rt_data_queue_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = rt_data_queue_init &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_open
</UL>

<P><STRONG><a name="[359]"></a>rt_data_queue_peak</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, dataqueue.o(i.rt_data_queue_peak))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = rt_data_queue_peak &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
</UL>

<P><STRONG><a name="[35a]"></a>rt_data_queue_pop</STRONG> (Thumb, 414 bytes, Stack size 56 bytes, dataqueue.o(i.rt_data_queue_pop))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = rt_data_queue_pop &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_before
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
</UL>

<P><STRONG><a name="[24d]"></a>rt_data_queue_push</STRONG> (Thumb, 314 bytes, Stack size 56 bytes, dataqueue.o(i.rt_data_queue_push))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = rt_data_queue_push &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_before
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_tx
</UL>

<P><STRONG><a name="[2f6]"></a>rt_device_close</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, device.o(i.rt_device_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = rt_device_close &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_device
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_console_set_device
</UL>

<P><STRONG><a name="[2f4]"></a>rt_device_find</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, device.o(i.rt_device_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncmp
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
</UL>
<BR>[Called By]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_device
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_console_set_device
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
</UL>

<P><STRONG><a name="[35e]"></a>rt_device_oled_register</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, oled.o(i.rt_device_oled_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = rt_device_oled_register &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_oled_thread_entry
</UL>

<P><STRONG><a name="[2f5]"></a>rt_device_open</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, device.o(i.rt_device_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = rt_device_open &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_device
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_console_set_device
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[304]"></a>rt_device_read</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, device.o(i.rt_device_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = rt_device_read &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[35f]"></a>rt_device_register</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, device.o(i.rt_device_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = rt_device_register &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_register
</UL>

<P><STRONG><a name="[2f7]"></a>rt_device_set_rx_indicate</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, device.o(i.rt_device_set_rx_indicate))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = rt_device_set_rx_indicate &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_device
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[361]"></a>rt_device_write</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, device.o(i.rt_device_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + In Cycle
<LI>Call Chain = rt_device_write &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>

<P><STRONG><a name="[b6]"></a>rt_dsp_thread_entry</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, thread_dsp.o(i.rt_dsp_thread_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 2360<LI>Call Chain = rt_dsp_thread_entry &rArr; feature_computing &rArr; get_formant_window &rArr; get_hamming_window &rArr; hamming &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_send
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_recv
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feature_stop_computing
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feature_start_computing
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feature_init_computing
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feature_continue_computing
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feature_computing
</UL>
<BR>[Address Reference Count : 1]<UL><LI> application.o(i.rt_application_init)
</UL>
<P><STRONG><a name="[26f]"></a>rt_enter_critical</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, scheduler.o(i.rt_enter_critical))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_enter_critical
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rename
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lseek
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_read
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_usage_idle_hook
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_soft_timer_check
</UL>

<P><STRONG><a name="[2aa]"></a>rt_event_create</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, ipc.o(i.rt_event_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = rt_event_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_create
</UL>

<P><STRONG><a name="[2ab]"></a>rt_event_recv</STRONG> (Thumb, 430 bytes, Stack size 64 bytes, ipc.o(i.rt_event_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = rt_event_recv &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_suspend
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_recv_timeout
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_recv
</UL>

<P><STRONG><a name="[2ad]"></a>rt_event_send</STRONG> (Thumb, 228 bytes, Stack size 40 bytes, ipc.o(i.rt_event_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = rt_event_send &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_send
</UL>

<P><STRONG><a name="[271]"></a>rt_exit_critical</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, scheduler.o(i.rt_exit_critical))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rename
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lseek
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_read
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_usage_idle_hook
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_soft_timer_check
</UL>

<P><STRONG><a name="[b5]"></a>rt_file_thread_entry</STRONG> (Thumb, 366 bytes, Stack size 3024 bytes, thread_file.o(i.rt_file_thread_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 4496<LI>Call Chain = rt_file_thread_entry &rArr; do_mpu_stop &rArr; rename &rArr; f_rename &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_Cmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recorder_start
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_send
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_recv
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_sensors_stop
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_sensors_start
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_sensors_event
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_mpu_stop
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_mpu_start
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_mpu_event
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_dsp_write_event
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_dsp_stop
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_dsp_start
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_dsp_read_event
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_audio_stop
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_audio_start
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_audio_event_1
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_audio_event_0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> application.o(i.rt_application_init)
</UL>
<P><STRONG><a name="[254]"></a>rt_free</STRONG> (Thumb, 334 bytes, Stack size 24 bytes, mem.o(i.rt_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plug_holes
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_leave_record_mode
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_close
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
</UL>

<P><STRONG><a name="[366]"></a>rt_hw_board_init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, board.o(i.rt_hw_board_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = rt_hw_board_init &rArr; stm32_hw_usart_init &rArr; rt_hw_serial_register &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_hw_usart_init
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_hw_oled_spi_init
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_console_set_device
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Configuration
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_adc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[375]"></a>rt_hw_console_output</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, kservice.o(i.rt_hw_console_output))
<BR><BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>

<P><STRONG><a name="[115]"></a>rt_hw_hard_fault_exception</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, cpuport.o(i.rt_hw_hard_fault_exception))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = rt_hw_hard_fault_exception &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[1fb]"></a>rt_hw_serial_isr</STRONG> (Thumb, 358 bytes, Stack size 40 bytes, serial.o(i.rt_hw_serial_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = rt_hw_serial_isr &rArr; rt_data_queue_pop &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_peak
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_done
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[369]"></a>rt_hw_serial_register</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, serial.o(i.rt_hw_serial_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = rt_hw_serial_register &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
</UL>
<BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_hw_usart_init
</UL>

<P><STRONG><a name="[245]"></a>rt_hw_stack_init</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, cpuport.o(i.rt_hw_stack_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_hw_stack_init
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
</UL>

<P><STRONG><a name="[16e]"></a>rt_interrupt_enter</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, irq.o(i.rt_interrupt_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_interrupt_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_IRQHandler
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream3_IRQHandler
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream4_IRQHandler
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream3_IRQHandler
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTG_FS_IRQHandler
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[353]"></a>rt_interrupt_get_nest</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, irq.o(i.rt_interrupt_get_nest))
<BR><BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_create
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_create
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
</UL>

<P><STRONG><a name="[171]"></a>rt_interrupt_leave</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, irq.o(i.rt_interrupt_leave))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_interrupt_leave
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_IRQHandler
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream3_IRQHandler
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream4_IRQHandler
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream3_IRQHandler
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTG_FS_IRQHandler
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[af]"></a>rt_key_thread_entry</STRONG> (Thumb, 602 bytes, Stack size 80 bytes, thread_key.o(i.rt_key_thread_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = rt_key_thread_entry &rArr; rt_timer_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_OpenMassStorage
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_CloseMassStorage
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PLL48CLK
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_delete
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_create
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keys_scan
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_register
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> application.o(i.rt_application_init)
</UL>
<P><STRONG><a name="[1ba]"></a>rt_kprintf</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, kservice.o(i.rt_kprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_console_output
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_delete
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_register
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeout
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wavhead_encode
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2s_set_sample_rate
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_set_record_mode
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_show_version
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_device
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_init
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_create
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_send
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_create
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rename
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lseek
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_read
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_send
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_recv_timeout
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_recv
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_create
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wm8978_thread_entry
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sensors_thread_entry
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mpu_thread_entry
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_key_thread_entry
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_battery_thread_entry
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_create
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_create
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_write_reg
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_set_speaker_volume
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_set_speaker
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_set_player_mode
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_set_output
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_set_mic_gain
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_set_mic
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_set_linein_gain
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_set_input
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_set_i2s_config
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_set_headset_volume
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_set_headset
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_set_eq_3d_dir
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_set_dac
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_set_aux_gain
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_set_adc
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_set_3d
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_read_reg
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_register
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leave_stop_mode
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_key_down
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feature_stop_computing
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feature_start_computing
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feature_init_computing
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_register
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_stop_recording
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_start_recording
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_name
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_sensors_stop
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_sensors_start
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_mpu_stop
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_mpu_start
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_mpu_event
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_dsp_stop
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_dsp_start
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_audio_stop
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_audio_start
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si7021_register
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp180_register
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bh1750_register
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensors_stop_recording
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensors_start_recording
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_register
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_usage_get
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050_register
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bus_register
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_stop_recording
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_start_recording
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_oled_register
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_EnableWideBusOperation
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_err_info
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDEnWideBus
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_init
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_toggle
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_on
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_off
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_wait_ack
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_stop
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_start
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_send_nbytes
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_send_nack
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_send_byte
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_send_ack
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_recv_nbytes
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_recv_byte
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_set
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_get
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_clr
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_ioctl
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_init
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_check_device
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STORAGE_Write
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STORAGE_Read
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STORAGE_Init
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_putc
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_getc
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_control
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_configure
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_peak
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_init
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_init
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_done
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_register
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_write
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_read
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_open
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_init
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_control
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_close
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_poll_tx
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_poll_rx
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_int_tx
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_int_rx
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_rx
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si7021_write_cmd
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si7021_read_reg
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si7021_read_data
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si7021_init
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si7021_get_temperature
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si7021_get_humidity
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si7021_check_device
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050_read_raw_data
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050_read_data
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050_ioctl
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050_init
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050_check_device
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050_write_reg
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050_set_sample_rate
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050_set_lpf
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050_set_gyro_fsr
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050_set_acce_fsr
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050_read_reg
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp180_write_reg
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp180_read_reg
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp180_read_data
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp180_get_ut
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp180_get_up
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp180_get_cal_param
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp180_check_device
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bh1750_write_cmd
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bh1750_read_data
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bh1750_init
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bh1750_get_lx
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bh1750_check_device
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bh1750_ioctl
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_set_time
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_set_date
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_set_rx_indicate
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_close
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_scheduler_stack_check
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mem
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plug_holes
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_prefix
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hello
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_wait_queue
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_timer
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_thread
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_sem
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_mutex
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_msgqueue
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_mempool
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_mailbox
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_event
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_device
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault_exception
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timeout
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_run_line
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_handle_history
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_auto_complete
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_rx_ind
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_disk_initialize
</UL>

<P><STRONG><a name="[256]"></a>rt_malloc</STRONG> (Thumb, 604 bytes, Stack size 32 bytes, mem.o(i.rt_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_set_record_mode
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_dsp_start
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_init
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_open
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
</UL>

<P><STRONG><a name="[269]"></a>rt_memcmp</STRONG> (Thumb, 38 bytes, Stack size 20 bytes, kservice.o(i.rt_memcmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_need_change
</UL>

<P><STRONG><a name="[29b]"></a>rt_memcpy</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, kservice.o(i.rt_memcpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feature_init_computing
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_sensors_stop
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_mpu_stop
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_dsp_start
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_audio_stop
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_recording
</UL>

<P><STRONG><a name="[306]"></a>rt_memmove</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, kservice.o(i.rt_memmove))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[244]"></a>rt_memset</STRONG> (Thumb, 72 bytes, Stack size 20 bytes, kservice.o(i.rt_memset))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feature_computing
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_sensors_start
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_mpu_stop
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_mpu_start
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_mpu_event
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_audio_stop
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_audio_start
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_audio_event_1
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_audio_event_0
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensors_recording
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_start_recording
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_recording
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_open
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
</UL>

<P><STRONG><a name="[b0]"></a>rt_mpu_thread_entry</STRONG> (Thumb, 144 bytes, Stack size 112 bytes, thread_mpu6050.o(i.rt_mpu_thread_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = rt_mpu_thread_entry &rArr; mpu_recording &rArr; event_recv &rArr; rt_event_recv &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_recv_timeout
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050_register
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bus_register
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_stop_recording
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_start_recording
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_recording
</UL>
<BR>[Address Reference Count : 1]<UL><LI> application.o(i.rt_application_init)
</UL>
<P><STRONG><a name="[32f]"></a>rt_mutex_create</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, ipc.o(i.rt_mutex_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = rt_mutex_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_create
</UL>

<P><STRONG><a name="[331]"></a>rt_mutex_release</STRONG> (Thumb, 302 bytes, Stack size 32 bytes, ipc.o(i.rt_mutex_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
</UL>

<P><STRONG><a name="[330]"></a>rt_mutex_take</STRONG> (Thumb, 392 bytes, Stack size 40 bytes, ipc.o(i.rt_mutex_take))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_suspend
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
</UL>

<P><STRONG><a name="[362]"></a>rt_object_allocate</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, object.o(i.rt_object_allocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_create
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_create
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_create
</UL>

<P><STRONG><a name="[378]"></a>rt_object_delete</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, object.o(i.rt_object_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = rt_object_delete &rArr; rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_delete
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
</UL>

<P><STRONG><a name="[37a]"></a>rt_object_detach</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, object.o(i.rt_object_detach))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = rt_object_detach &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
</UL>

<P><STRONG><a name="[360]"></a>rt_object_init</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, object.o(i.rt_object_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_object_init &rArr; rt_strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
</UL>

<P><STRONG><a name="[37b]"></a>rt_object_is_systemobject</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, object.o(i.rt_object_is_systemobject))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = rt_object_is_systemobject &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
</UL>

<P><STRONG><a name="[b3]"></a>rt_oled_thread_entry</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, thread_oled.o(i.rt_oled_thread_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = rt_oled_thread_entry &rArr; event_recv &rArr; rt_event_recv &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_recv
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_oled_register
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_si7021
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_rtc
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_mpu6050
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_bmp180
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_battery
</UL>
<BR>[Address Reference Count : 1]<UL><LI> application.o(i.rt_application_init)
</UL>
<P><STRONG><a name="[34f]"></a>rt_schedule</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, scheduler.o(i.rt_schedule))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_context_switch_interrupt
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_context_switch
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_scheduler_stack_check
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ffs
</UL>
<BR>[Called By]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_send
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_done
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_yield
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timer_entry
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timeout
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
</UL>

<P><STRONG><a name="[383]"></a>rt_schedule_insert_thread</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, scheduler.o(i.rt_schedule_insert_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = rt_schedule_insert_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timeout
</UL>

<P><STRONG><a name="[384]"></a>rt_schedule_remove_thread</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, scheduler.o(i.rt_schedule_remove_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = rt_schedule_remove_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
</UL>

<P><STRONG><a name="[2fd]"></a>rt_sem_init</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, ipc.o(i.rt_sem_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = rt_sem_init &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
</UL>

<P><STRONG><a name="[2f2]"></a>rt_sem_release</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, ipc.o(i.rt_sem_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = rt_sem_release &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_rx_ind
</UL>

<P><STRONG><a name="[301]"></a>rt_sem_take</STRONG> (Thumb, 324 bytes, Stack size 40 bytes, ipc.o(i.rt_sem_take))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_suspend
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[b1]"></a>rt_sensors_thread_entry</STRONG> (Thumb, 204 bytes, Stack size 112 bytes, thread_sensors.o(i.rt_sensors_thread_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = rt_sensors_thread_entry &rArr; si7021_register &rArr; mutex_create &rArr; rt_mutex_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_recv_timeout
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si7021_register
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp180_register
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bh1750_register
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensors_stop_recording
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensors_start_recording
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensors_recording
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bus_register
</UL>
<BR>[Address Reference Count : 1]<UL><LI> application.o(i.rt_application_init)
</UL>
<P><STRONG><a name="[24b]"></a>rt_set_errno</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, kservice.o(i.rt_set_errno))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
</UL>
<BR>[Called By]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_tx
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_rx
</UL>

<P><STRONG><a name="[389]"></a>rt_show_version</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, kservice.o(i.rt_show_version))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = rt_show_version &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;version
</UL>

<P><STRONG><a name="[2c4]"></a>rt_snprintf</STRONG> (Thumb, 38 bytes, Stack size 40 bytes, kservice.o(i.rt_snprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = rt_snprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feature_computing
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_name
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensors_recording
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_recording
</UL>

<P><STRONG><a name="[38a]"></a>rt_soft_timer_check</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, timer.o(i.rt_soft_timer_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = rt_soft_timer_check &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timer_entry
</UL>

<P><STRONG><a name="[268]"></a>rt_strlen</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, kservice.o(i.rt_strlen))
<BR><BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feature_init_computing
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_need_change
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_sensors_stop
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_sensors_event
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_mpu_stop
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_dsp_write_event
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_dsp_start
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_audio_stop
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</UL>

<P><STRONG><a name="[35d]"></a>rt_strncmp</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, kservice.o(i.rt_strncmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rt_strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
</UL>

<P><STRONG><a name="[320]"></a>rt_strncpy</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, kservice.o(i.rt_strncpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_prefix
</UL>

<P><STRONG><a name="[38c]"></a>rt_system_heap_init</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, mem.o(i.rt_system_heap_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = rt_system_heap_init &rArr; rt_sem_init &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[38d]"></a>rt_system_scheduler_init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, scheduler.o(i.rt_system_scheduler_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_system_scheduler_init
</UL>
<BR>[Calls]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[38f]"></a>rt_system_scheduler_start</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, scheduler.o(i.rt_system_scheduler_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_system_scheduler_start
</UL>
<BR>[Calls]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_context_switch_to
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ffs
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[391]"></a>rt_system_timer_init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, timer.o(i.rt_system_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_system_timer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[392]"></a>rt_system_timer_thread_init</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, timer.o(i.rt_system_timer_thread_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = rt_system_timer_thread_init &rArr; rt_thread_init &rArr; _rt_thread_init &rArr; rt_timer_init &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[376]"></a>rt_thread_control</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, thread.o(i.rt_thread_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
</UL>

<P><STRONG><a name="[393]"></a>rt_thread_create</STRONG> (Thumb, 80 bytes, Stack size 56 bytes, thread.o(i.rt_thread_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
</UL>
<BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_create
</UL>

<P><STRONG><a name="[1b9]"></a>rt_thread_delay</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, thread.o(i.rt_thread_delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_init
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_oled_thread_entry
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_key_thread_entry
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_battery_thread_entry
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_display
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si7021_write_cmd
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si7021_read_reg
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si7021_init
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si7021_get_temperature
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si7021_get_humidity
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050_init
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp180_get_ut
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp180_get_up
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timer_entry
</UL>

<P><STRONG><a name="[36f]"></a>rt_thread_delete</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, thread.o(i.rt_thread_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = rt_thread_delete &rArr; rt_timer_detach &rArr; rt_object_detach &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_key_thread_entry
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
</UL>

<P><STRONG><a name="[397]"></a>rt_thread_idle_excute</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, idle.o(i.rt_thread_idle_excute))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = rt_thread_idle_excute &rArr; rt_object_delete &rArr; rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_has_defunct_thread
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_entry
</UL>

<P><STRONG><a name="[399]"></a>rt_thread_idle_init</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, idle.o(i.rt_thread_idle_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = rt_thread_idle_init &rArr; rt_thread_init &rArr; _rt_thread_init &rArr; rt_timer_init &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[276]"></a>rt_thread_idle_sethook</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, idle.o(i.rt_thread_idle_sethook))
<BR><BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_usage_init
</UL>

<P><STRONG><a name="[2fe]"></a>rt_thread_init</STRONG> (Thumb, 110 bytes, Stack size 56 bytes, thread.o(i.rt_thread_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = rt_thread_init &rArr; _rt_thread_init &rArr; rt_timer_init &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
</UL>
<BR>[Called By]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_init
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_thread_init
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
</UL>

<P><STRONG><a name="[34e]"></a>rt_thread_resume</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, thread.o(i.rt_thread_resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = rt_thread_resume &rArr; rt_schedule_insert_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_send
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_done
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume
</UL>

<P><STRONG><a name="[351]"></a>rt_thread_self</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, thread.o(i.rt_thread_self))
<BR><BR>[Called By]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault_exception
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timer_entry
</UL>

<P><STRONG><a name="[394]"></a>rt_thread_sleep</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, thread.o(i.rt_thread_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
</UL>

<P><STRONG><a name="[2ff]"></a>rt_thread_startup</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, thread.o(i.rt_thread_startup))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_init
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_thread_init
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_create
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
</UL>

<P><STRONG><a name="[352]"></a>rt_thread_suspend</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, thread.o(i.rt_thread_suspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = rt_thread_suspend &rArr; rt_schedule_remove_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_suspend
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timer_entry
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
</UL>

<P><STRONG><a name="[87]"></a>rt_thread_timeout</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, thread.o(i.rt_thread_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = rt_thread_timeout &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
</UL>
<BR>[Address Reference Count : 1]<UL><LI> thread.o(i._rt_thread_init)
</UL>
<P><STRONG><a name="[39d]"></a>rt_thread_yield</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, thread.o(i.rt_thread_yield))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = rt_thread_yield &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
</UL>

<P><STRONG><a name="[240]"></a>rt_tick_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, clock.o(i.rt_tick_get))
<BR><BR>[Called By]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_usage_idle_hook
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_timer
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_soft_timer_check
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timer_entry
</UL>

<P><STRONG><a name="[1f8]"></a>rt_tick_increase</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, clock.o(i.rt_tick_increase))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = rt_tick_increase &rArr; rt_timer_check &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_yield
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[39e]"></a>rt_timer_check</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, timer.o(i.rt_timer_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = rt_timer_check &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
</UL>

<P><STRONG><a name="[354]"></a>rt_timer_control</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, timer.o(i.rt_timer_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = rt_timer_control &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
</UL>

<P><STRONG><a name="[372]"></a>rt_timer_create</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, timer.o(i.rt_timer_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = rt_timer_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_key_thread_entry
</UL>

<P><STRONG><a name="[373]"></a>rt_timer_delete</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, timer.o(i.rt_timer_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = rt_timer_delete &rArr; rt_object_delete &rArr; rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_key_thread_entry
</UL>

<P><STRONG><a name="[395]"></a>rt_timer_detach</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, timer.o(i.rt_timer_detach))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = rt_timer_detach &rArr; rt_object_detach &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
</UL>

<P><STRONG><a name="[246]"></a>rt_timer_init</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, timer.o(i.rt_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = rt_timer_init &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
</UL>

<P><STRONG><a name="[355]"></a>rt_timer_start</STRONG> (Thumb, 382 bytes, Stack size 32 bytes, timer.o(i.rt_timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_key_thread_entry
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_soft_timer_check
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
</UL>

<P><STRONG><a name="[39b]"></a>rt_timer_stop</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, timer.o(i.rt_timer_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = rt_timer_stop &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
</UL>

<P><STRONG><a name="[374]"></a>rt_vsnprintf</STRONG> (Thumb, 800 bytes, Stack size 88 bytes, kservice.o(i.rt_vsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_atoi
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_number
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
</UL>

<P><STRONG><a name="[b4]"></a>rt_wm8978_thread_entry</STRONG> (Thumb, 156 bytes, Stack size 112 bytes, thread_audio.o(i.rt_wm8978_thread_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = rt_wm8978_thread_entry &rArr; audio_start_recording &rArr; audio_set_record_mode &rArr; i2s_set_sample_rate &rArr; mutex_unlock &rArr;  mutex_unlock (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_recv_timeout
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_register
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2s_gpio_config
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_stop_recording
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_start_recording
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bus_register
</UL>
<BR>[Address Reference Count : 1]<UL><LI> application.o(i.rt_application_init)
</UL>
<P><STRONG><a name="[322]"></a>rtthread_startup</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, startup.o(i.rtthread_startup))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = rtthread_startup &rArr; rt_application_init &rArr; thread_create &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_init
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_thread_init
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_init
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_start
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_init
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_show_version
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_device
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_init
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_application_init
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[36e]"></a>set_PLL48CLK</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, system_stm32f4xx.o(i.set_PLL48CLK))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_key_thread_entry
</UL>

<P><STRONG><a name="[348]"></a>set_nouse_gpio_an_mode</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, lowpower.o(i.set_nouse_gpio_an_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = set_nouse_gpio_an_mode &rArr; GPIO_Init &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_application_init
</UL>

<P><STRONG><a name="[385]"></a>si7021_register</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, si7021.o(i.si7021_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = si7021_register &rArr; mutex_create &rArr; rt_mutex_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_create
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sensors_thread_entry
</UL>

<P><STRONG><a name="[368]"></a>stm32_hw_oled_spi_init</STRONG> (Thumb, 246 bytes, Stack size 32 bytes, oled.o(i.stm32_hw_oled_spi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = stm32_hw_oled_spi_init &rArr; GPIO_Init &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[367]"></a>stm32_hw_usart_init</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, usart.o(i.stm32_hw_usart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = stm32_hw_usart_init &rArr; rt_hw_serial_register &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_register
</UL>
<BR>[Called By]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[297]"></a>sync</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, easy_rtthread.o(i.sync))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = sync &rArr; f_sync &rArr; sync_fs &rArr; sync_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_Cmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_audio_start
</UL>

<P><STRONG><a name="[349]"></a>thread_create</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, easy_rtthread.o(i.thread_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = thread_create &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_application_init
</UL>

<P><STRONG><a name="[3a9]"></a>token_get_string</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, finsh_token.o(i.token_get_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = token_get_string &rArr; token_next_char
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_prev_char
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_next_char
</UL>
<BR>[Called By]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_run
</UL>

<P><STRONG><a name="[371]"></a>usbd_CloseMassStorage</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usbd_usr.o(i.usbd_CloseMassStorage))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = usbd_CloseMassStorage &rArr; DCD_DevDisconnect &rArr; USB_OTG_BSP_mDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_DevDisconnect
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_key_thread_entry
</UL>

<P><STRONG><a name="[370]"></a>usbd_OpenMassStorage</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, usbd_usr.o(i.usbd_OpenMassStorage))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = usbd_OpenMassStorage &rArr; USBD_Init &rArr; USB_OTG_BSP_Init &rArr; GPIO_Init &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_key_thread_entry
</UL>

<P><STRONG><a name="[108]"></a>version</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cmd.o(i.version))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = version &rArr; rt_show_version &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_show_version
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[1b6]"></a>watchdog_feed</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, watchdog.o(i.watchdog_feed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = watchdog_feed
</UL>
<BR>[Calls]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WKUP_IRQHandler
</UL>

<P><STRONG><a name="[257]"></a>wavhead_encode</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, wav.o(i.wavhead_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = wavhead_encode &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_set_record_mode
</UL>

<P><STRONG><a name="[29a]"></a>wavhead_write_data_size</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, wav.o(i.wavhead_write_data_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = wavhead_write_data_size &rArr; write &rArr; f_write &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_Cmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lseek
</UL>
<BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_audio_stop
</UL>

<P><STRONG><a name="[cf]"></a>wm8978_check_device</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, wm8978.o(i.wm8978_check_device))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = wm8978_check_device &rArr; mutex_unlock &rArr;  mutex_unlock (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm8978.o(i.wm8978_register)
</UL>
<P><STRONG><a name="[d0]"></a>wm8978_init</STRONG> (Thumb, 206 bytes, Stack size 16 bytes, wm8978.o(i.wm8978_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = wm8978_init &rArr; wm8978_write_reg &rArr; mutex_unlock &rArr;  mutex_unlock (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_write_reg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm8978.o(i.wm8978_register)
</UL>
<P><STRONG><a name="[d1]"></a>wm8978_ioctl</STRONG> (Thumb, 284 bytes, Stack size 24 bytes, wm8978.o(i.wm8978_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = wm8978_ioctl &rArr; wm8978_set_input &rArr; wm8978_set_linein_gain &rArr; wm8978_write_reg &rArr; mutex_unlock &rArr;  mutex_unlock (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_set_speaker_volume
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_set_speaker
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_set_recorder_mode
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_set_player_mode
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_set_output
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_set_mic_gain
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_set_mic
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_set_linein_gain
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_set_input
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_set_i2s_config
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_set_headset_volume
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_set_headset
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_set_eq_3d_dir
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_set_dac
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_set_aux_gain
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_set_adc
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_set_3d
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm8978.o(i.wm8978_register)
</UL>
<P><STRONG><a name="[3a3]"></a>wm8978_register</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, wm8978.o(i.wm8978_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = wm8978_register &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wm8978_thread_entry
</UL>

<P><STRONG><a name="[292]"></a>write</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, easy_rtthread.o(i.write))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = write &rArr; f_write &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_Cmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wavhead_write_data_size
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_sensors_event
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_mpu_stop
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_mpu_event
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_dsp_write_event
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_audio_start
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_audio_event_1
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_audio_event_0
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[c9]"></a>timeout</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, thread_key.o(i.timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = timeout &rArr; event_send &rArr; mutex_unlock &rArr;  mutex_unlock (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> thread_key.o(i.rt_key_thread_entry)
</UL>
<P><STRONG><a name="[37c]"></a>display_battery</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, thread_oled.o(i.display_battery))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = display_battery
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_oled_thread_entry
</UL>

<P><STRONG><a name="[32b]"></a>mpu_recording</STRONG> (Thumb, 166 bytes, Stack size 104 bytes, thread_mpu6050.o(i.mpu_recording))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = mpu_recording &rArr; event_recv &rArr; rt_event_recv &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_send
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_recv
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mpu_thread_entry
</UL>

<P><STRONG><a name="[32c]"></a>mpu_start_recording</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, thread_mpu6050.o(i.mpu_start_recording))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = mpu_start_recording &rArr; event_recv &rArr; rt_event_recv &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_send
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_recv
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mpu_thread_entry
</UL>

<P><STRONG><a name="[32d]"></a>mpu_stop_recording</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, thread_mpu6050.o(i.mpu_stop_recording))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = mpu_stop_recording &rArr; event_recv &rArr; rt_event_recv &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_send
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_recv
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mpu_thread_entry
</UL>

<P><STRONG><a name="[31b]"></a>led_display</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, thread_battery.o(i.led_display))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = led_display &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_battery_thread_entry
</UL>

<P><STRONG><a name="[387]"></a>sensors_recording</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, thread_sensors.o(i.sensors_recording))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = sensors_recording &rArr; event_recv &rArr; rt_event_recv &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_send
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_recv
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sensors_thread_entry
</UL>

<P><STRONG><a name="[386]"></a>sensors_start_recording</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, thread_sensors.o(i.sensors_start_recording))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = sensors_start_recording &rArr; event_recv &rArr; rt_event_recv &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_send
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_recv
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sensors_thread_entry
</UL>

<P><STRONG><a name="[388]"></a>sensors_stop_recording</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, thread_sensors.o(i.sensors_stop_recording))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = sensors_stop_recording &rArr; event_recv &rArr; rt_event_recv &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_send
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_recv
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sensors_thread_entry
</UL>

<P><STRONG><a name="[291]"></a>do_audio_event_0</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, thread_file.o(i.do_audio_event_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = do_audio_event_0 &rArr; write &rArr; f_write &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_Cmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_file_thread_entry
</UL>

<P><STRONG><a name="[293]"></a>do_audio_event_1</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, thread_file.o(i.do_audio_event_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = do_audio_event_1 &rArr; write &rArr; f_write &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_Cmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_file_thread_entry
</UL>

<P><STRONG><a name="[294]"></a>do_audio_start</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, thread_file.o(i.do_audio_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 1160<LI>Call Chain = do_audio_start &rArr; open &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_Cmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recorder_start
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_send
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_name
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_file_thread_entry
</UL>

<P><STRONG><a name="[299]"></a>do_audio_stop</STRONG> (Thumb, 210 bytes, Stack size 280 bytes, thread_file.o(i.do_audio_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 1464<LI>Call Chain = do_audio_stop &rArr; rename &rArr; f_rename &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_Cmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wavhead_write_data_size
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_leave_record_mode
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rename
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_send
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_name
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_file_thread_entry
</UL>

<P><STRONG><a name="[29d]"></a>do_dsp_read_event</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, thread_file.o(i.do_dsp_read_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = do_dsp_read_event &rArr; file_read &rArr; f_read &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_Cmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_read
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_send
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_file_thread_entry
</UL>

<P><STRONG><a name="[29f]"></a>do_dsp_start</STRONG> (Thumb, 480 bytes, Stack size 56 bytes, thread_file.o(i.do_dsp_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 1192<LI>Call Chain = do_dsp_start &rArr; open &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_Cmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_read
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_send
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_file_thread_entry
</UL>

<P><STRONG><a name="[2a0]"></a>do_dsp_stop</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, thread_file.o(i.do_dsp_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 1144<LI>Call Chain = do_dsp_stop &rArr; f_unlink &rArr; chk_mounted &rArr; disk_initialize &rArr; SD_disk_initialize &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; mutex_unlock &rArr;  mutex_unlock (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_send
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_file_thread_entry
</UL>

<P><STRONG><a name="[2a2]"></a>do_dsp_write_event</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, thread_file.o(i.do_dsp_write_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = do_dsp_write_event &rArr; write &rArr; f_write &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_Cmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_send
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_file_thread_entry
</UL>

<P><STRONG><a name="[2a3]"></a>do_mpu_event</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, thread_file.o(i.do_mpu_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = do_mpu_event &rArr; write &rArr; f_write &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_Cmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_send
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_file_thread_entry
</UL>

<P><STRONG><a name="[2a4]"></a>do_mpu_start</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, thread_file.o(i.do_mpu_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 1152<LI>Call Chain = do_mpu_start &rArr; open &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_Cmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_send
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_name
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_file_thread_entry
</UL>

<P><STRONG><a name="[2a5]"></a>do_mpu_stop</STRONG> (Thumb, 228 bytes, Stack size 288 bytes, thread_file.o(i.do_mpu_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 1472<LI>Call Chain = do_mpu_stop &rArr; rename &rArr; f_rename &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_Cmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rename
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_send
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_name
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_file_thread_entry
</UL>

<P><STRONG><a name="[2a6]"></a>do_sensors_event</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, thread_file.o(i.do_sensors_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = do_sensors_event &rArr; write &rArr; f_write &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_Cmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_send
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_file_thread_entry
</UL>

<P><STRONG><a name="[2a7]"></a>do_sensors_start</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, thread_file.o(i.do_sensors_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 1152<LI>Call Chain = do_sensors_start &rArr; open &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_Cmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_send
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_name
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_file_thread_entry
</UL>

<P><STRONG><a name="[2a8]"></a>do_sensors_stop</STRONG> (Thumb, 178 bytes, Stack size 280 bytes, thread_file.o(i.do_sensors_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 1464<LI>Call Chain = do_sensors_stop &rArr; rename &rArr; f_rename &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_Cmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rename
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_send
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_name
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_file_thread_entry
</UL>

<P><STRONG><a name="[295]"></a>format_name</STRONG> (Thumb, 254 bytes, Stack size 48 bytes, thread_file.o(i.format_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = format_name &rArr; mutex_unlock &rArr;  mutex_unlock (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rtc_info
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_sensors_stop
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_sensors_start
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_mpu_stop
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_mpu_start
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_audio_stop
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_audio_start
</UL>

<P><STRONG><a name="[25d]"></a>audio_start_recording</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, thread_audio.o(i.audio_start_recording))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = audio_start_recording &rArr; audio_set_record_mode &rArr; i2s_set_sample_rate &rArr; mutex_unlock &rArr;  mutex_unlock (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_set_record_mode
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_send
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_recv
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wm8978_thread_entry
</UL>

<P><STRONG><a name="[260]"></a>audio_stop_recording</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, thread_audio.o(i.audio_stop_recording))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = audio_stop_recording &rArr; event_recv &rArr; rt_event_recv &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recorder_stop
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_send
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_recv
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wm8978_thread_entry
</UL>

<P><STRONG><a name="[267]"></a>check_need_change</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, thread_dsp.o(i.check_need_change))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = check_need_change &rArr; rt_memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcmp
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feature_stop_computing
</UL>

<P><STRONG><a name="[2c0]"></a>feature_computing</STRONG> (Thumb, 244 bytes, Stack size 1096 bytes, thread_dsp.o(i.feature_computing))
<BR><BR>[Stack]<UL><LI>Max Depth = 2352<LI>Call Chain = feature_computing &rArr; get_formant_window &rArr; get_hamming_window &rArr; hamming &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_send
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_formant_window
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_entropy_brightness_window
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_energy_window
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dsp_thread_entry
</UL>

<P><STRONG><a name="[2c5]"></a>feature_continue_computing</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, thread_dsp.o(i.feature_continue_computing))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = feature_continue_computing &rArr; event_send &rArr; mutex_unlock &rArr;  mutex_unlock (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_send
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dsp_thread_entry
</UL>

<P><STRONG><a name="[2c6]"></a>feature_init_computing</STRONG> (Thumb, 224 bytes, Stack size 8 bytes, thread_dsp.o(i.feature_init_computing))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = feature_init_computing &rArr; event_send &rArr; mutex_unlock &rArr;  mutex_unlock (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_send
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dsp_thread_entry
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feature_stop_computing
</UL>

<P><STRONG><a name="[2c7]"></a>feature_start_computing</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, thread_dsp.o(i.feature_start_computing))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = feature_start_computing &rArr; event_send &rArr; mutex_unlock &rArr;  mutex_unlock (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_send
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dsp_thread_entry
</UL>

<P><STRONG><a name="[2c8]"></a>feature_stop_computing</STRONG> (Thumb, 262 bytes, Stack size 8 bytes, thread_dsp.o(i.feature_stop_computing))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = feature_stop_computing &rArr; feature_init_computing &rArr; event_send &rArr; mutex_unlock &rArr;  mutex_unlock (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feature_init_computing
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_need_change
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dsp_thread_entry
</UL>

<P><STRONG><a name="[3c6]"></a>wm8978_read_reg</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, wm8978.o(i.wm8978_read_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = wm8978_read_reg &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_set_mic
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_set_linein_gain
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_set_input
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_set_eq_3d_dir
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_set_dac
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_set_aux_gain
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_set_adc
</UL>

<P><STRONG><a name="[3c1]"></a>wm8978_set_3d</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, wm8978.o(i.wm8978_set_3d))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = wm8978_set_3d &rArr; wm8978_write_reg &rArr; mutex_unlock &rArr;  mutex_unlock (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_write_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_ioctl
</UL>

<P><STRONG><a name="[3b5]"></a>wm8978_set_adc</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, wm8978.o(i.wm8978_set_adc))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = wm8978_set_adc &rArr; wm8978_write_reg &rArr; mutex_unlock &rArr;  mutex_unlock (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_write_reg
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_ioctl
</UL>

<P><STRONG><a name="[3ba]"></a>wm8978_set_aux_gain</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, wm8978.o(i.wm8978_set_aux_gain))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = wm8978_set_aux_gain &rArr; wm8978_write_reg &rArr; mutex_unlock &rArr;  mutex_unlock (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_write_reg
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_set_input
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_ioctl
</UL>

<P><STRONG><a name="[3b6]"></a>wm8978_set_dac</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, wm8978.o(i.wm8978_set_dac))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = wm8978_set_dac &rArr; wm8978_write_reg &rArr; mutex_unlock &rArr;  mutex_unlock (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_write_reg
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_ioctl
</UL>

<P><STRONG><a name="[3c2]"></a>wm8978_set_eq_3d_dir</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, wm8978.o(i.wm8978_set_eq_3d_dir))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = wm8978_set_eq_3d_dir &rArr; wm8978_write_reg &rArr; mutex_unlock &rArr;  mutex_unlock (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_write_reg
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_ioctl
</UL>

<P><STRONG><a name="[3be]"></a>wm8978_set_headset</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, wm8978.o(i.wm8978_set_headset))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = wm8978_set_headset &rArr; wm8978_write_reg &rArr; mutex_unlock &rArr;  mutex_unlock (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_write_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_ioctl
</UL>

<P><STRONG><a name="[3bf]"></a>wm8978_set_headset_volume</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, wm8978.o(i.wm8978_set_headset_volume))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = wm8978_set_headset_volume &rArr; wm8978_write_reg &rArr; mutex_unlock &rArr;  mutex_unlock (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_write_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_ioctl
</UL>

<P><STRONG><a name="[3c3]"></a>wm8978_set_i2s_config</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, wm8978.o(i.wm8978_set_i2s_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = wm8978_set_i2s_config &rArr; wm8978_write_reg &rArr; mutex_unlock &rArr;  mutex_unlock (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_write_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_ioctl
</UL>

<P><STRONG><a name="[3b7]"></a>wm8978_set_input</STRONG> (Thumb, 468 bytes, Stack size 24 bytes, wm8978.o(i.wm8978_set_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = wm8978_set_input &rArr; wm8978_set_linein_gain &rArr; wm8978_write_reg &rArr; mutex_unlock &rArr;  mutex_unlock (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_write_reg
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_set_linein_gain
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_set_aux_gain
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_ioctl
</UL>

<P><STRONG><a name="[3b9]"></a>wm8978_set_linein_gain</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, wm8978.o(i.wm8978_set_linein_gain))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = wm8978_set_linein_gain &rArr; wm8978_write_reg &rArr; mutex_unlock &rArr;  mutex_unlock (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_write_reg
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_set_input
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_ioctl
</UL>

<P><STRONG><a name="[3bc]"></a>wm8978_set_mic</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, wm8978.o(i.wm8978_set_mic))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = wm8978_set_mic &rArr; wm8978_write_reg &rArr; mutex_unlock &rArr;  mutex_unlock (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_write_reg
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_ioctl
</UL>

<P><STRONG><a name="[3bb]"></a>wm8978_set_mic_gain</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, wm8978.o(i.wm8978_set_mic_gain))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = wm8978_set_mic_gain &rArr; wm8978_write_reg &rArr; mutex_unlock &rArr;  mutex_unlock (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_write_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_ioctl
</UL>

<P><STRONG><a name="[3b8]"></a>wm8978_set_output</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, wm8978.o(i.wm8978_set_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = wm8978_set_output &rArr; wm8978_write_reg &rArr; mutex_unlock &rArr;  mutex_unlock (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_write_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_ioctl
</UL>

<P><STRONG><a name="[3c4]"></a>wm8978_set_player_mode</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, wm8978.o(i.wm8978_set_player_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = wm8978_set_player_mode &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_ioctl
</UL>

<P><STRONG><a name="[3c5]"></a>wm8978_set_recorder_mode</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, wm8978.o(i.wm8978_set_recorder_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wm8978_set_recorder_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_ioctl
</UL>

<P><STRONG><a name="[3bd]"></a>wm8978_set_speaker</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, wm8978.o(i.wm8978_set_speaker))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = wm8978_set_speaker &rArr; wm8978_write_reg &rArr; mutex_unlock &rArr;  mutex_unlock (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_write_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_ioctl
</UL>

<P><STRONG><a name="[3c0]"></a>wm8978_set_speaker_volume</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, wm8978.o(i.wm8978_set_speaker_volume))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = wm8978_set_speaker_volume &rArr; wm8978_write_reg &rArr; mutex_unlock &rArr;  mutex_unlock (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_write_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_ioctl
</UL>

<P><STRONG><a name="[3b4]"></a>wm8978_write_reg</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, wm8978.o(i.wm8978_write_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = wm8978_write_reg &rArr; mutex_unlock &rArr;  mutex_unlock (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_set_speaker_volume
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_set_speaker
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_set_output
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_set_mic_gain
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_set_mic
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_set_linein_gain
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_set_input
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_set_i2s_config
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_set_headset_volume
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_set_headset
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_set_eq_3d_dir
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_set_dac
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_set_aux_gain
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_set_adc
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_set_3d
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_init
</UL>

<P><STRONG><a name="[96]"></a>cpu_usage_idle_hook</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, cpuusage.o(i.cpu_usage_idle_hook))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = cpu_usage_idle_hook &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cpuusage.o(i.cpu_usage_init)
</UL>
<P><STRONG><a name="[336]"></a>pin_init</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, pin.o(i.pin_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = pin_init &rArr; GPIO_Init &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_register
</UL>

<P><STRONG><a name="[315]"></a>i2c_delay</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, i2c.o(i.i2c_delay))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_wait_ack
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_stop
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_start
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_send_nack
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_send_byte
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_send_ack
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_recv_byte
</UL>

<P><STRONG><a name="[316]"></a>i2s_clock_init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, i2s.o(i.i2s_clock_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = i2s_clock_init &rArr; RCC_APB1PeriphResetCmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2s_set_tx_mode
</UL>

<P><STRONG><a name="[334]"></a>o_pow</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, oled.o(i.o_pow))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = o_pow
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_display_number
</UL>

<P><STRONG><a name="[333]"></a>oled_display_char</STRONG> (Thumb, 208 bytes, Stack size 56 bytes, oled.o(i.oled_display_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = oled_display_char &rArr; oled_draw_point &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_draw_point
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_display_string
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_display_number
</UL>

<P><STRONG><a name="[332]"></a>oled_write_byte</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, oled.o(i.oled_write_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = oled_write_byte &rArr; spi_send_byte &rArr; SPI_I2S_SendData &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_send_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_turn_on
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_turn_off
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_set_dir
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_set_contrast
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_refresh_gram
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_clear_screen
</UL>

<P><STRONG><a name="[335]"></a>spi_send_byte</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, oled.o(i.spi_send_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = spi_send_byte &rArr; SPI_I2S_SendData &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_write_byte
</UL>

<P><STRONG><a name="[13d]"></a>CmdError</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, sdio_sd.o(i.CmdError))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = CmdError &rArr; SDIO_GetFlagStatus &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[140]"></a>CmdResp1Error</STRONG> (Thumb, 298 bytes, Stack size 24 bytes, sdio_sd.o(i.CmdResp1Error))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = CmdResp1Error &rArr; SDIO_GetResponse &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetCommandResponse
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_StopTransfer
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendStatus
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SelectDeselect
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDEnWideBus
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
</UL>

<P><STRONG><a name="[143]"></a>CmdResp2Error</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, sdio_sd.o(i.CmdResp2Error))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = CmdResp2Error &rArr; SDIO_ClearFlag &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitializeCards
</UL>

<P><STRONG><a name="[144]"></a>CmdResp3Error</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, sdio_sd.o(i.CmdResp3Error))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = CmdResp3Error &rArr; SDIO_ClearFlag &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[145]"></a>CmdResp6Error</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, sdio_sd.o(i.CmdResp6Error))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = CmdResp6Error &rArr; SDIO_GetResponse &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetCommandResponse
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitializeCards
</UL>

<P><STRONG><a name="[146]"></a>CmdResp7Error</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, sdio_sd.o(i.CmdResp7Error))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = CmdResp7Error &rArr; SDIO_ClearFlag &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[17e]"></a>FindSCR</STRONG> (Thumb, 386 bytes, Stack size 32 bytes, sdio_sd.o(i.FindSCR))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = FindSCR &rArr; CmdResp1Error &rArr; SDIO_GetResponse &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DataConfig
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ReadData
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDEnWideBus
</UL>

<P><STRONG><a name="[1cb]"></a>SDEnWideBus</STRONG> (Thumb, 472 bytes, Stack size 24 bytes, sdio_sd.o(i.SDEnWideBus))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = SDEnWideBus &rArr; mutex_unlock &rArr;  mutex_unlock (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_EnableWideBusOperation
</UL>

<P><STRONG><a name="[1e0]"></a>sdio_err_info</STRONG> (Thumb, 342 bytes, Stack size 8 bytes, sdio_sd.o(i.sdio_err_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = sdio_err_info &rArr; mutex_unlock &rArr;  mutex_unlock (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[8e]"></a>bh1750_ioctl</STRONG> (Thumb, 258 bytes, Stack size 24 bytes, bh1750.o(i.bh1750_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = bh1750_ioctl &rArr; mutex_unlock &rArr;  mutex_unlock (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bh1750.o(i.bh1750_register)
</UL>
<P><STRONG><a name="[8f]"></a>bmp180_check_device</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, bmp180.o(i.bmp180_check_device))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = bmp180_check_device &rArr; mutex_unlock &rArr;  mutex_unlock (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bmp180.o(i.bmp180_register)
</UL>
<P><STRONG><a name="[90]"></a>bmp180_get_cal_param</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, bmp180.o(i.bmp180_get_cal_param))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = bmp180_get_cal_param &rArr; mutex_unlock &rArr;  mutex_unlock (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bmp180.o(i.bmp180_register)
</UL>
<P><STRONG><a name="[94]"></a>bmp180_get_up</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, bmp180.o(i.bmp180_get_up))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = bmp180_get_up &rArr; mutex_unlock &rArr;  mutex_unlock (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bmp180.o(i.bmp180_register)
</UL>
<P><STRONG><a name="[93]"></a>bmp180_get_ut</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, bmp180.o(i.bmp180_get_ut))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = bmp180_get_ut &rArr; mutex_unlock &rArr;  mutex_unlock (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bmp180.o(i.bmp180_register)
</UL>
<P><STRONG><a name="[95]"></a>bmp180_read_data</STRONG> (Thumb, 344 bytes, Stack size 48 bytes, bmp180.o(i.bmp180_read_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = bmp180_read_data &rArr; mutex_unlock &rArr;  mutex_unlock (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bmp180.o(i.bmp180_register)
</UL>
<P><STRONG><a name="[91]"></a>bmp180_read_reg</STRONG> (Thumb, 230 bytes, Stack size 32 bytes, bmp180.o(i.bmp180_read_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = bmp180_read_reg &rArr; mutex_unlock &rArr;  mutex_unlock (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bmp180.o(i.bmp180_register)
</UL>
<P><STRONG><a name="[92]"></a>bmp180_write_reg</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, bmp180.o(i.bmp180_write_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = bmp180_write_reg &rArr; mutex_unlock &rArr;  mutex_unlock (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bmp180.o(i.bmp180_register)
</UL>
<P><STRONG><a name="[ab]"></a>mpu6050_read_reg</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, mpu6050.o(i.mpu6050_read_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = mpu6050_read_reg &rArr; mutex_unlock &rArr;  mutex_unlock (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mpu6050.o(i.mpu6050_register)
</UL>
<P><STRONG><a name="[326]"></a>mpu6050_set_acce_fsr</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, mpu6050.o(i.mpu6050_set_acce_fsr))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = mpu6050_set_acce_fsr &rArr; mutex_unlock &rArr;  mutex_unlock (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050_ioctl
</UL>

<P><STRONG><a name="[325]"></a>mpu6050_set_gyro_fsr</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, mpu6050.o(i.mpu6050_set_gyro_fsr))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = mpu6050_set_gyro_fsr &rArr; mutex_unlock &rArr;  mutex_unlock (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050_ioctl
</UL>

<P><STRONG><a name="[327]"></a>mpu6050_set_lpf</STRONG> (Thumb, 218 bytes, Stack size 24 bytes, mpu6050.o(i.mpu6050_set_lpf))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = mpu6050_set_lpf &rArr; mutex_unlock &rArr;  mutex_unlock (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050_ioctl
</UL>

<P><STRONG><a name="[328]"></a>mpu6050_set_sample_rate</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, mpu6050.o(i.mpu6050_set_sample_rate))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = mpu6050_set_sample_rate &rArr; mutex_unlock &rArr;  mutex_unlock (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050_ioctl
</UL>

<P><STRONG><a name="[aa]"></a>mpu6050_write_reg</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, mpu6050.o(i.mpu6050_write_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = mpu6050_write_reg &rArr; mutex_unlock &rArr;  mutex_unlock (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mpu6050.o(i.mpu6050_register)
</UL>
<P><STRONG><a name="[cc]"></a>si7021_check_device</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, si7021.o(i.si7021_check_device))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = si7021_check_device &rArr; mutex_unlock &rArr;  mutex_unlock (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> si7021.o(i.si7021_register)
</UL>
<P><STRONG><a name="[3a4]"></a>si7021_get_humidity</STRONG> (Thumb, 224 bytes, Stack size 24 bytes, si7021.o(i.si7021_get_humidity))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = si7021_get_humidity &rArr; mutex_unlock &rArr;  mutex_unlock (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si7021_read_data
</UL>

<P><STRONG><a name="[3a5]"></a>si7021_get_temperature</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, si7021.o(i.si7021_get_temperature))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = si7021_get_temperature &rArr; mutex_unlock &rArr;  mutex_unlock (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si7021_read_data
</UL>

<P><STRONG><a name="[cd]"></a>si7021_init</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, si7021.o(i.si7021_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = si7021_init &rArr; si7021_write_cmd &rArr; mutex_unlock &rArr;  mutex_unlock (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si7021_write_cmd
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si7021_read_reg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> si7021.o(i.si7021_register)
</UL>
<P><STRONG><a name="[ce]"></a>si7021_read_data</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, si7021.o(i.si7021_read_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = si7021_read_data &rArr; si7021_get_temperature &rArr; mutex_unlock &rArr;  mutex_unlock (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si7021_get_temperature
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si7021_get_humidity
</UL>
<BR>[Address Reference Count : 1]<UL><LI> si7021.o(i.si7021_register)
</UL>
<P><STRONG><a name="[3a7]"></a>si7021_read_reg</STRONG> (Thumb, 244 bytes, Stack size 24 bytes, si7021.o(i.si7021_read_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = si7021_read_reg &rArr; mutex_unlock &rArr;  mutex_unlock (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si7021_init
</UL>

<P><STRONG><a name="[3a6]"></a>si7021_write_cmd</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, si7021.o(i.si7021_write_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = si7021_write_cmd &rArr; mutex_unlock &rArr;  mutex_unlock (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si7021_init
</UL>

<P><STRONG><a name="[249]"></a>_serial_dma_rx</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, serial.o(i._serial_dma_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = _serial_dma_rx &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_read
</UL>

<P><STRONG><a name="[24c]"></a>_serial_dma_tx</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, serial.o(i._serial_dma_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = _serial_dma_tx &rArr; rt_data_queue_push &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_write
</UL>

<P><STRONG><a name="[24e]"></a>_serial_int_rx</STRONG> (Thumb, 160 bytes, Stack size 40 bytes, serial.o(i._serial_int_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = _serial_int_rx &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_read
</UL>

<P><STRONG><a name="[24f]"></a>_serial_int_tx</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, serial.o(i._serial_int_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = _serial_int_tx &rArr; rt_completion_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_write
</UL>

<P><STRONG><a name="[251]"></a>_serial_poll_rx</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, serial.o(i._serial_poll_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = _serial_poll_rx &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_read
</UL>

<P><STRONG><a name="[252]"></a>_serial_poll_tx</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, serial.o(i._serial_poll_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = _serial_poll_tx &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_write
</UL>

<P><STRONG><a name="[c5]"></a>rt_serial_close</STRONG> (Thumb, 330 bytes, Stack size 24 bytes, serial.o(i.rt_serial_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = rt_serial_close &rArr; rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(i.rt_hw_serial_register)
</UL>
<P><STRONG><a name="[c8]"></a>rt_serial_control</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, serial.o(i.rt_serial_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = rt_serial_control &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(i.rt_hw_serial_register)
</UL>
<P><STRONG><a name="[c3]"></a>rt_serial_init</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, serial.o(i.rt_serial_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = rt_serial_init &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(i.rt_hw_serial_register)
</UL>
<P><STRONG><a name="[c4]"></a>rt_serial_open</STRONG> (Thumb, 460 bytes, Stack size 24 bytes, serial.o(i.rt_serial_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = rt_serial_open &rArr; rt_data_queue_init &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_init
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(i.rt_hw_serial_register)
</UL>
<P><STRONG><a name="[c6]"></a>rt_serial_read</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, serial.o(i.rt_serial_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = rt_serial_read &rArr; _serial_int_rx &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_poll_rx
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_int_rx
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_rx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(i.rt_hw_serial_register)
</UL>
<P><STRONG><a name="[c7]"></a>rt_serial_write</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, serial.o(i.rt_serial_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = rt_serial_write &rArr; _serial_dma_tx &rArr; rt_data_queue_push &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_poll_tx
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_int_tx
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_tx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(i.rt_hw_serial_register)
</UL>
<P><STRONG><a name="[182]"></a>GPIO_Configuration</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, usart.o(i.GPIO_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = GPIO_Configuration &rArr; GPIO_Init &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_hw_usart_init
</UL>

<P><STRONG><a name="[198]"></a>NVIC_Configuration</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, usart.o(i.NVIC_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = NVIC_Configuration &rArr; NVIC_Init &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_hw_usart_init
</UL>

<P><STRONG><a name="[1a2]"></a>RCC_Configuration</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, usart.o(i.RCC_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = RCC_Configuration &rArr; RCC_APB2PeriphClockCmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_hw_usart_init
</UL>

<P><STRONG><a name="[d2]"></a>stm32_configure</STRONG> (Thumb, 186 bytes, Stack size 40 bytes, usart.o(i.stm32_configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = stm32_configure &rArr; USART_Init &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart.o(.constdata)
</UL>
<P><STRONG><a name="[d3]"></a>stm32_control</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, usart.o(i.stm32_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = stm32_control &rArr; USART_ITConfig &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart.o(.constdata)
</UL>
<P><STRONG><a name="[d5]"></a>stm32_getc</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, usart.o(i.stm32_getc))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = stm32_getc &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart.o(.constdata)
</UL>
<P><STRONG><a name="[d4]"></a>stm32_putc</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, usart.o(i.stm32_putc))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = stm32_putc &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart.o(.constdata)
</UL>
<P><STRONG><a name="[225]"></a>rt_hw_us_delay</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, usb_bsp.o(i.rt_hw_us_delay))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_mDelay
</UL>

<P><STRONG><a name="[1ab]"></a>RTC_Bcd2ToByte</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(i.RTC_Bcd2ToByte))
<BR><BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetTime
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetDate
</UL>

<P><STRONG><a name="[1b3]"></a>RTC_ByteToBcd2</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(i.RTC_ByteToBcd2))
<BR><BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
</UL>

<P><STRONG><a name="[358]"></a>rt_list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dataqueue.o(i.rt_list_init))
<BR><BR>[Called By]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_init
</UL>

<P><STRONG><a name="[35b]"></a>rt_list_insert_before</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, dataqueue.o(i.rt_list_insert_before))
<BR><BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
</UL>

<P><STRONG><a name="[35c]"></a>rt_list_isempty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dataqueue.o(i.rt_list_isempty))
<BR><BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
</UL>

<P><STRONG><a name="[34d]"></a>rt_list_isempty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, completion.o(i.rt_list_isempty))
<BR><BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_done
</UL>

<P><STRONG><a name="[398]"></a>_has_defunct_thread</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, idle.o(i._has_defunct_thread))
<BR><BR>[Called By]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
</UL>

<P><STRONG><a name="[cb]"></a>rt_thread_idle_entry</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, idle.o(i.rt_thread_idle_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = rt_thread_idle_entry &rArr; rt_thread_idle_excute &rArr; rt_object_delete &rArr; rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
</UL>
<BR>[Address Reference Count : 1]<UL><LI> idle.o(i.rt_thread_idle_init)
</UL>
<P><STRONG><a name="[36a]"></a>rt_ipc_list_resume</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ipc.o(i.rt_ipc_list_resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = rt_ipc_list_resume &rArr; rt_thread_resume &rArr; rt_schedule_insert_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
</UL>

<P><STRONG><a name="[364]"></a>rt_ipc_list_suspend</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, ipc.o(i.rt_ipc_list_suspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_schedule_remove_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_before
</UL>
<BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
</UL>

<P><STRONG><a name="[363]"></a>rt_ipc_object_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ipc.o(i.rt_ipc_object_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_ipc_object_init
</UL>
<BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_create
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_create
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
</UL>

<P><STRONG><a name="[36c]"></a>rt_list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ipc.o(i.rt_list_init))
<BR><BR>[Called By]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_object_init
</UL>

<P><STRONG><a name="[36b]"></a>rt_list_insert_before</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ipc.o(i.rt_list_insert_before))
<BR><BR>[Called By]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_suspend
</UL>

<P><STRONG><a name="[365]"></a>rt_list_isempty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ipc.o(i.rt_list_isempty))
<BR><BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_send
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
</UL>

<P><STRONG><a name="[3a2]"></a>print_number</STRONG> (Thumb, 388 bytes, Stack size 56 bytes, kservice.o(i.print_number))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = print_number
</UL>
<BR>[Called By]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</UL>

<P><STRONG><a name="[3a1]"></a>skip_atoi</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, kservice.o(i.skip_atoi))
<BR><BR>[Called By]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</UL>

<P><STRONG><a name="[337]"></a>plug_holes</STRONG> (Thumb, 214 bytes, Stack size 24 bytes, mem.o(i.plug_holes))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = plug_holes &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>

<P><STRONG><a name="[377]"></a>rt_list_insert_after</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, object.o(i.rt_list_insert_after))
<BR><BR>[Called By]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
</UL>

<P><STRONG><a name="[379]"></a>rt_list_remove</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, object.o(i.rt_list_remove))
<BR><BR>[Called By]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
</UL>

<P><STRONG><a name="[241]"></a>_rt_scheduler_stack_check</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, scheduler.o(i._rt_scheduler_stack_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>

<P><STRONG><a name="[38e]"></a>rt_list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, scheduler.o(i.rt_list_init))
<BR><BR>[Called By]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_init
</UL>

<P><STRONG><a name="[243]"></a>_rt_thread_init</STRONG> (Thumb, 156 bytes, Stack size 48 bytes, thread.o(i._rt_thread_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = _rt_thread_init &rArr; rt_timer_init &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_stack_init
</UL>
<BR>[Called By]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
</UL>

<P><STRONG><a name="[396]"></a>rt_list_insert_after</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, thread.o(i.rt_list_insert_after))
<BR><BR>[Called By]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
</UL>

<P><STRONG><a name="[39a]"></a>rt_list_remove</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, thread.o(i.rt_list_remove))
<BR><BR>[Called By]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_yield
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timeout
</UL>

<P><STRONG><a name="[86]"></a>rt_thread_exit</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, thread.o(i.rt_thread_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = rt_thread_exit &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
</UL>
<BR>[Address Reference Count : 1]<UL><LI> thread.o(i._rt_thread_init)
</UL>
<P><STRONG><a name="[247]"></a>_rt_timer_init</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, timer.o(i._rt_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _rt_timer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_create
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
</UL>

<P><STRONG><a name="[38b]"></a>_rt_timer_remove</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, timer.o(i._rt_timer_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _rt_timer_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_delete
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_soft_timer_check
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
</UL>

<P><STRONG><a name="[248]"></a>rt_list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, timer.o(i.rt_list_init))
<BR><BR>[Called By]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_thread_init
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_init
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_init
</UL>

<P><STRONG><a name="[3a0]"></a>rt_list_insert_after</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, timer.o(i.rt_list_insert_after))
<BR><BR>[Called By]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
</UL>

<P><STRONG><a name="[39f]"></a>rt_list_isempty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, timer.o(i.rt_list_isempty))
<BR><BR>[Called By]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_list_next_timeout
</UL>

<P><STRONG><a name="[ca]"></a>rt_thread_timer_entry</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, timer.o(i.rt_thread_timer_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = rt_thread_timer_entry &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_soft_timer_check
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_list_next_timeout
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer.o(i.rt_system_timer_thread_init)
</UL>
<P><STRONG><a name="[39c]"></a>rt_timer_list_next_timeout</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, timer.o(i.rt_timer_list_next_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_timer_list_next_timeout
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timer_entry
</UL>

<P><STRONG><a name="[233]"></a>_list_device</STRONG> (Thumb, 82 bytes, Stack size 96 bytes, cmd.o(i._list_device))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = _list_device &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_device
</UL>

<P><STRONG><a name="[235]"></a>_list_event</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, cmd.o(i._list_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = _list_event &rArr; show_wait_queue &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_wait_queue
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_len
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
</UL>

<P><STRONG><a name="[239]"></a>_list_mailbox</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, cmd.o(i._list_mailbox))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = _list_mailbox &rArr; show_wait_queue &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_wait_queue
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_len
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
</UL>

<P><STRONG><a name="[23a]"></a>_list_mempool</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, cmd.o(i._list_mempool))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = _list_mempool &rArr; show_wait_queue &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_wait_queue
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mempool
</UL>

<P><STRONG><a name="[23b]"></a>_list_msgqueue</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, cmd.o(i._list_msgqueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = _list_msgqueue &rArr; show_wait_queue &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_wait_queue
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_len
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_msgqueue
</UL>

<P><STRONG><a name="[23c]"></a>_list_mutex</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, cmd.o(i._list_mutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = _list_mutex &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_len
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mutex
</UL>

<P><STRONG><a name="[23d]"></a>_list_sem</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, cmd.o(i._list_sem))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = _list_sem &rArr; show_wait_queue &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_wait_queue
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_len
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
</UL>

<P><STRONG><a name="[23e]"></a>_list_thread</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, cmd.o(i._list_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
</UL>

<P><STRONG><a name="[23f]"></a>_list_timer</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, cmd.o(i._list_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = _list_timer &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_timer
</UL>

<P><STRONG><a name="[236]"></a>rt_list_isempty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cmd.o(i.rt_list_isempty))
<BR><BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_sem
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_msgqueue
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_mailbox
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_event
</UL>

<P><STRONG><a name="[237]"></a>rt_list_len</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cmd.o(i.rt_list_len))
<BR><BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_sem
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_mutex
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_msgqueue
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_mailbox
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_event
</UL>

<P><STRONG><a name="[238]"></a>show_wait_queue</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, cmd.o(i.show_wait_queue))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = show_wait_queue &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_sem
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_msgqueue
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_mempool
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_mailbox
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_event
</UL>

<P><STRONG><a name="[31f]"></a>str_common</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, cmd.o(i.str_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = str_common
</UL>
<BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_prefix
</UL>

<P><STRONG><a name="[31e]"></a>str_is_prefix</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, cmd.o(i.str_is_prefix))
<BR><BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_prefix
</UL>

<P><STRONG><a name="[2c9]"></a>finsh_compile</STRONG> (Thumb, 5712 bytes, Stack size 8 bytes, finsh_compiler.o(i.finsh_compile))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + In Cycle
<LI>Call Chain = finsh_compile &rArr;  finsh_compile (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_set
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_compile
</UL>
<BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_compiler_run
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_compile
</UL>

<P><STRONG><a name="[2cc]"></a>finsh_type_check</STRONG> (Thumb, 350 bytes, Stack size 16 bytes, finsh_compiler.o(i.finsh_type_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = finsh_type_check &rArr;  finsh_type_check (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_set
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_type_check
</UL>
<BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_compiler_run
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_type_check
</UL>

<P><STRONG><a name="[2d5]"></a>finsh_block_insert</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, finsh_heap.o(i.finsh_block_insert))
<BR><BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_heap_free
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_heap_allocate
</UL>

<P><STRONG><a name="[2d8]"></a>finsh_block_merge</STRONG> (Thumb, 124 bytes, Stack size 12 bytes, finsh_heap.o(i.finsh_block_merge))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = finsh_block_merge
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_heap_free
</UL>

<P><STRONG><a name="[2d4]"></a>finsh_block_remove</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, finsh_heap.o(i.finsh_block_remove))
<BR><BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_heap_free
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_heap_allocate
</UL>

<P><STRONG><a name="[2d3]"></a>finsh_block_split</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, finsh_heap.o(i.finsh_block_split))
<BR><BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_heap_allocate
</UL>

<P><STRONG><a name="[2d2]"></a>finsh_heap_gc</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, finsh_heap.o(i.finsh_heap_gc))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = finsh_heap_gc &rArr; finsh_heap_free &rArr; finsh_block_merge
</UL>
<BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_heap_free
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_heap_allocate
</UL>

<P><STRONG><a name="[323]"></a>make_sys_node</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, finsh_parser.o(i.make_sys_node))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = make_sys_node
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_allocate
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_set
</UL>
<BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_variable_decl
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_unary_expr
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_shift_expr
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_postfix_expr
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_multiplicative_expr
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_inclusive_or_expr
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_exclusive_or_expr
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_assign_expr
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_and_expr
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_additive_expr
</UL>

<P><STRONG><a name="[338]"></a>proc_additive_expr</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, finsh_parser.o(i.proc_additive_expr))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = proc_additive_expr &rArr; proc_multiplicative_expr &rArr; proc_cast_expr &rArr;  proc_cast_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_set
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_token_token
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_multiplicative_expr
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_sys_node
</UL>
<BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_shift_expr
</UL>

<P><STRONG><a name="[33a]"></a>proc_and_expr</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, finsh_parser.o(i.proc_and_expr))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = proc_and_expr &rArr; proc_shift_expr &rArr; proc_additive_expr &rArr; proc_multiplicative_expr &rArr; proc_cast_expr &rArr;  proc_cast_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_set
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_token_token
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_shift_expr
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_sys_node
</UL>
<BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_exclusive_or_expr
</UL>

<P><STRONG><a name="[33c]"></a>proc_assign_expr</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, finsh_parser.o(i.proc_assign_expr))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + In Cycle
<LI>Call Chain = proc_assign_expr &rArr;  proc_assign_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_token_token
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_inclusive_or_expr
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_assign_expr
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_sys_node
</UL>
<BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_variable_decl
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_param_list
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_expr
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_assign_expr
</UL>

<P><STRONG><a name="[33e]"></a>proc_cast_expr</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, finsh_parser.o(i.proc_cast_expr))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + In Cycle
<LI>Call Chain = proc_cast_expr &rArr;  proc_cast_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_set
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_token_token
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_unary_expr
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_type
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_cast_expr
</UL>
<BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_unary_expr
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_multiplicative_expr
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_cast_expr
</UL>

<P><STRONG><a name="[341]"></a>proc_exclusive_or_expr</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, finsh_parser.o(i.proc_exclusive_or_expr))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = proc_exclusive_or_expr &rArr; proc_and_expr &rArr; proc_shift_expr &rArr; proc_additive_expr &rArr; proc_multiplicative_expr &rArr; proc_cast_expr &rArr;  proc_cast_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_set
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_token_token
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_and_expr
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_sys_node
</UL>
<BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_inclusive_or_expr
</UL>

<P><STRONG><a name="[342]"></a>proc_expr</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, finsh_parser.o(i.proc_expr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + In Cycle
<LI>Call Chain = proc_expr &rArr;  proc_assign_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_assign_expr
</UL>
<BR>[Called By]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_primary_expr
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_expr_statement
</UL>

<P><STRONG><a name="[2eb]"></a>proc_expr_statement</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, finsh_parser.o(i.proc_expr_statement))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = proc_expr_statement &rArr; finsh_token_token &rArr; token_run &rArr; token_proc_number &rArr; token_spec_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_set
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_token_token
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_expr
</UL>
<BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_parser_run
</UL>

<P><STRONG><a name="[343]"></a>proc_identifier</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, finsh_parser.o(i.proc_identifier))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = proc_identifier &rArr; finsh_token_token &rArr; token_run &rArr; token_proc_number &rArr; token_spec_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_set
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_token_token
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_variable_decl
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_primary_expr
</UL>

<P><STRONG><a name="[33d]"></a>proc_inclusive_or_expr</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, finsh_parser.o(i.proc_inclusive_or_expr))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = proc_inclusive_or_expr &rArr; proc_exclusive_or_expr &rArr; proc_and_expr &rArr; proc_shift_expr &rArr; proc_additive_expr &rArr; proc_multiplicative_expr &rArr; proc_cast_expr &rArr;  proc_cast_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_set
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_token_token
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_exclusive_or_expr
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_sys_node
</UL>
<BR>[Called By]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_assign_expr
</UL>

<P><STRONG><a name="[339]"></a>proc_multiplicative_expr</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, finsh_parser.o(i.proc_multiplicative_expr))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = proc_multiplicative_expr &rArr; proc_cast_expr &rArr;  proc_cast_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_set
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_token_token
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_cast_expr
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_sys_node
</UL>
<BR>[Called By]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_additive_expr
</UL>

<P><STRONG><a name="[344]"></a>proc_param_list</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, finsh_parser.o(i.proc_param_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + In Cycle
<LI>Call Chain = proc_param_list &rArr;  proc_assign_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_set
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_token_token
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_assign_expr
</UL>
<BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_postfix_expr
</UL>

<P><STRONG><a name="[345]"></a>proc_postfix_expr</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, finsh_parser.o(i.proc_postfix_expr))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = proc_postfix_expr &rArr; proc_primary_expr &rArr; proc_identifier &rArr; finsh_token_token &rArr; token_run &rArr; token_proc_number &rArr; token_spec_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_set
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_token_token
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_primary_expr
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_param_list
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_sys_node
</UL>
<BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_unary_expr
</UL>

<P><STRONG><a name="[346]"></a>proc_primary_expr</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, finsh_parser.o(i.proc_primary_expr))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = proc_primary_expr &rArr; proc_identifier &rArr; finsh_token_token &rArr; token_run &rArr; token_proc_number &rArr; token_spec_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_new_string
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_new_ptr
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_new_long
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_new_int
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_new_id
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_new_char
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_set
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_token_token
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_identifier
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_expr
</UL>
<BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_postfix_expr
</UL>

<P><STRONG><a name="[33b]"></a>proc_shift_expr</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, finsh_parser.o(i.proc_shift_expr))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = proc_shift_expr &rArr; proc_additive_expr &rArr; proc_multiplicative_expr &rArr; proc_cast_expr &rArr;  proc_cast_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_set
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_token_token
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_additive_expr
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_sys_node
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_and_expr
</UL>

<P><STRONG><a name="[33f]"></a>proc_type</STRONG> (Thumb, 250 bytes, Stack size 16 bytes, finsh_parser.o(i.proc_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = proc_type &rArr; finsh_token_token &rArr; token_run &rArr; token_proc_number &rArr; token_spec_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_set
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_token_token
</UL>
<BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_variable_decl
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_cast_expr
</UL>

<P><STRONG><a name="[340]"></a>proc_unary_expr</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, finsh_parser.o(i.proc_unary_expr))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + In Cycle
<LI>Call Chain = proc_unary_expr &rArr;  proc_cast_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_new_long
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_token_token
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_postfix_expr
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_cast_expr
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_sys_node
</UL>
<BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_cast_expr
</UL>

<P><STRONG><a name="[2ec]"></a>proc_variable_decl</STRONG> (Thumb, 474 bytes, Stack size 56 bytes, finsh_parser.o(i.proc_variable_decl))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = proc_variable_decl &rArr; proc_assign_expr &rArr;  proc_assign_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_new_id
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_set
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_var_insert
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_token_token
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_type
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_identifier
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_assign_expr
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_sys_node
</UL>
<BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_parser_run
</UL>

<P><STRONG><a name="[3ac]"></a>token_match_name</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, finsh_token.o(i.token_match_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = token_match_name &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_run
</UL>

<P><STRONG><a name="[3aa]"></a>token_next_char</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, finsh_token.o(i.token_next_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = token_next_char
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_get_string
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_trim_space
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_run
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_proc_string
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_proc_number
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_proc_escape
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_proc_char
</UL>

<P><STRONG><a name="[3ab]"></a>token_prev_char</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, finsh_token.o(i.token_prev_char))
<BR><BR>[Called By]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_get_string
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_trim_space
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_run
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_proc_number
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_proc_escape
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_proc_char
</UL>

<P><STRONG><a name="[3ad]"></a>token_proc_char</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, finsh_token.o(i.token_proc_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = token_proc_char &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_set
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_prev_char
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_next_char
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_run
</UL>

<P><STRONG><a name="[3ae]"></a>token_proc_escape</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, finsh_token.o(i.token_proc_escape))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = token_proc_escape &rArr; token_next_char
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_prev_char
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_next_char
</UL>
<BR>[Called By]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_proc_string
</UL>

<P><STRONG><a name="[3af]"></a>token_proc_number</STRONG> (Thumb, 288 bytes, Stack size 160 bytes, finsh_token.o(i.token_proc_number))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = token_proc_number &rArr; token_spec_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_spec_number
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_prev_char
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_next_char
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_run
</UL>

<P><STRONG><a name="[3b1]"></a>token_proc_string</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, finsh_token.o(i.token_proc_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = token_proc_string &rArr; token_proc_escape &rArr; token_next_char
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_set
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_proc_escape
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_next_char
</UL>
<BR>[Called By]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_run
</UL>

<P><STRONG><a name="[308]"></a>token_run</STRONG> (Thumb, 414 bytes, Stack size 16 bytes, finsh_token.o(i.token_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = token_run &rArr; token_proc_number &rArr; token_spec_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_set
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_get_string
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_trim_space
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_proc_string
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_proc_number
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_proc_char
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_prev_char
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_next_char
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_match_name
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_token_token
</UL>

<P><STRONG><a name="[3b0]"></a>token_spec_number</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, finsh_token.o(i.token_spec_number))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = token_spec_number
</UL>
<BR>[Called By]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_proc_number
</UL>

<P><STRONG><a name="[3b2]"></a>token_trim_space</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, finsh_token.o(i.token_trim_space))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = token_trim_space &rArr; token_next_char
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_prev_char
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_next_char
</UL>
<BR>[Called By]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_run
</UL>

<P><STRONG><a name="[97]"></a>finsh_rx_ind</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, shell.o(i.finsh_rx_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = finsh_rx_ind &rArr; rt_sem_release &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
</UL>
<BR>[Address Reference Count : 2]<UL><LI> shell.o(i.finsh_set_device)
<LI> shell.o(i.finsh_thread_entry)
</UL>
<P><STRONG><a name="[305]"></a>shell_auto_complete</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, shell.o(i.shell_auto_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = shell_auto_complete &rArr; list_prefix &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_prefix
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[303]"></a>shell_handle_history</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, shell.o(i.shell_handle_history))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = shell_handle_history &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[307]"></a>shell_push_history</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, shell.o(i.shell_push_history))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = shell_push_history
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[1f9]"></a>SetSysClock</STRONG> (Thumb, 220 bytes, Stack size 12 bytes, system_stm32f4xx.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClock
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[17]"></a>USBD_DataInStage</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, usbd_core.o(i.USBD_DataInStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = USBD_DataInStage &rArr; USBD_CtlContinueSendData &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlReceiveStatus
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlContinueSendData
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_RunTestMode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_core.o(.data)
</UL>
<P><STRONG><a name="[16]"></a>USBD_DataOutStage</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, usbd_core.o(i.USBD_DataOutStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = USBD_DataOutStage &rArr; USBD_CtlContinueRx &rArr; DCD_EP_PrepareRx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlContinueRx
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_core.o(.data)
</UL>
<P><STRONG><a name="[1f]"></a>USBD_DevConnected</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_DevConnected))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_DevConnected
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_core.o(.data)
</UL>
<P><STRONG><a name="[20]"></a>USBD_DevDisconnected</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_DevDisconnected))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_DevDisconnected
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_core.o(.data)
</UL>
<P><STRONG><a name="[1d]"></a>USBD_IsoINIncomplete</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_IsoINIncomplete))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_IsoINIncomplete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_core.o(.data)
</UL>
<P><STRONG><a name="[1e]"></a>USBD_IsoOUTIncomplete</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_IsoOUTIncomplete))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_IsoOUTIncomplete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_core.o(.data)
</UL>
<P><STRONG><a name="[1a]"></a>USBD_Reset</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = USBD_Reset &rArr; DCD_EP_Open &rArr; USB_OTG_EPActivate
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Open
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_core.o(.data)
</UL>
<P><STRONG><a name="[1c]"></a>USBD_Resume</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_Resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_Resume
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_core.o(.data)
</UL>
<P><STRONG><a name="[207]"></a>USBD_RunTestMode</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usbd_core.o(i.USBD_RunTestMode))
<BR><BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DataInStage
</UL>

<P><STRONG><a name="[19]"></a>USBD_SOF</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_SOF))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_SOF
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_core.o(.data)
</UL>
<P><STRONG><a name="[18]"></a>USBD_SetupStage</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, usbd_core.o(i.USBD_SetupStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = USBD_SetupStage &rArr; USBD_StdDevReq &rArr; USBD_GetDescriptor &rArr; USBD_CtlSendData &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Stall
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdItfReq
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ParseSetupRequest
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_core.o(.data)
</UL>
<P><STRONG><a name="[1b]"></a>USBD_Suspend</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_Suspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_Suspend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_core.o(.data)
</UL>
<P><STRONG><a name="[200]"></a>USBD_ClrFeature</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, usbd_req.o(i.USBD_ClrFeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = USBD_ClrFeature &rArr; USBD_CtlSendStatus &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[208]"></a>USBD_GetConfig</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, usbd_req.o(i.USBD_GetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = USBD_GetConfig &rArr; USBD_CtlSendData &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[209]"></a>USBD_GetDescriptor</STRONG> (Thumb, 290 bytes, Stack size 24 bytes, usbd_req.o(i.USBD_GetDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = USBD_GetDescriptor &rArr; USBD_CtlSendData &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[20c]"></a>USBD_GetLen</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usbd_req.o(i.USBD_GetLen))
<BR><BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetString
</UL>

<P><STRONG><a name="[20a]"></a>USBD_GetStatus</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, usbd_req.o(i.USBD_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = USBD_GetStatus &rArr; USBD_CtlSendData &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[21b]"></a>USBD_SetAddress</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, usbd_req.o(i.USBD_SetAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = USBD_SetAddress &rArr; USBD_CtlSendStatus &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_SetAddress
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[21d]"></a>USBD_SetConfig</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, usbd_req.o(i.USBD_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = USBD_SetConfig &rArr; USBD_CtlSendStatus &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetCfg
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ClrCfg
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[220]"></a>USBD_SetFeature</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, usbd_req.o(i.USBD_SetFeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = USBD_SetFeature &rArr; USBD_CtlSendStatus &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[189]"></a>MSC_BOT_Abort</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, usbd_msc_bot.o(i.MSC_BOT_Abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = MSC_BOT_Abort &rArr; DCD_EP_PrepareRx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Stall
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_PrepareRx
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_CBW_Decode
</UL>

<P><STRONG><a name="[18a]"></a>MSC_BOT_CBW_Decode</STRONG> (Thumb, 178 bytes, Stack size 8 bytes, usbd_msc_bot.o(i.MSC_BOT_CBW_Decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = MSC_BOT_CBW_Decode &rArr; SCSI_ProcessCmd &rArr; SCSI_Write10 &rArr; SCSI_ProcessWrite &rArr; MSC_BOT_SendCSW &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_SenseCode
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ProcessCmd
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_SendCSW
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_SendData
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_Abort
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetRxCount
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_DataOut
</UL>

<P><STRONG><a name="[18e]"></a>MSC_BOT_SendData</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, usbd_msc_bot.o(i.MSC_BOT_SendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MSC_BOT_SendData &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Tx
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_CBW_Decode
</UL>

<P><STRONG><a name="[1bd]"></a>SCSI_CheckAddressRange</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, usbd_msc_scsi.o(i.SCSI_CheckAddressRange))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SCSI_CheckAddressRange &rArr; SCSI_SenseCode
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_SenseCode
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Write10
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Verify10
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Read10
</UL>

<P><STRONG><a name="[1c0]"></a>SCSI_Inquiry</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, usbd_msc_scsi.o(i.SCSI_Inquiry))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SCSI_Inquiry
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ProcessCmd
</UL>

<P><STRONG><a name="[1c3]"></a>SCSI_ModeSense10</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, usbd_msc_scsi.o(i.SCSI_ModeSense10))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SCSI_ModeSense10
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ProcessCmd
</UL>

<P><STRONG><a name="[1c2]"></a>SCSI_ModeSense6</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, usbd_msc_scsi.o(i.SCSI_ModeSense6))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SCSI_ModeSense6
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ProcessCmd
</UL>

<P><STRONG><a name="[1c9]"></a>SCSI_ProcessRead</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, usbd_msc_scsi.o(i.SCSI_ProcessRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SCSI_ProcessRead &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_SenseCode
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Tx
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Read10
</UL>

<P><STRONG><a name="[1ca]"></a>SCSI_ProcessWrite</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, usbd_msc_scsi.o(i.SCSI_ProcessWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SCSI_ProcessWrite &rArr; MSC_BOT_SendCSW &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_SenseCode
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_SendCSW
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_PrepareRx
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Write10
</UL>

<P><STRONG><a name="[1c6]"></a>SCSI_Read10</STRONG> (Thumb, 212 bytes, Stack size 16 bytes, usbd_msc_scsi.o(i.SCSI_Read10))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SCSI_Read10 &rArr; SCSI_ProcessRead &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ProcessRead
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_CheckAddressRange
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_SenseCode
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ProcessCmd
</UL>

<P><STRONG><a name="[1c5]"></a>SCSI_ReadCapacity10</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, usbd_msc_scsi.o(i.SCSI_ReadCapacity10))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SCSI_ReadCapacity10 &rArr; SCSI_SenseCode
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_SenseCode
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ProcessCmd
</UL>

<P><STRONG><a name="[1c4]"></a>SCSI_ReadFormatCapacity</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, usbd_msc_scsi.o(i.SCSI_ReadFormatCapacity))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SCSI_ReadFormatCapacity &rArr; SCSI_SenseCode
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_SenseCode
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ProcessCmd
</UL>

<P><STRONG><a name="[1bf]"></a>SCSI_RequestSense</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, usbd_msc_scsi.o(i.SCSI_RequestSense))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SCSI_RequestSense
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ProcessCmd
</UL>

<P><STRONG><a name="[1c1]"></a>SCSI_StartStopUnit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usbd_msc_scsi.o(i.SCSI_StartStopUnit))
<BR><BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ProcessCmd
</UL>

<P><STRONG><a name="[1be]"></a>SCSI_TestUnitReady</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, usbd_msc_scsi.o(i.SCSI_TestUnitReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SCSI_TestUnitReady &rArr; SCSI_SenseCode
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_SenseCode
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ProcessCmd
</UL>

<P><STRONG><a name="[1c8]"></a>SCSI_Verify10</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, usbd_msc_scsi.o(i.SCSI_Verify10))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = SCSI_Verify10 &rArr; SCSI_CheckAddressRange &rArr; SCSI_SenseCode
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_CheckAddressRange
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_SenseCode
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ProcessCmd
</UL>

<P><STRONG><a name="[1c7]"></a>SCSI_Write10</STRONG> (Thumb, 274 bytes, Stack size 16 bytes, usbd_msc_scsi.o(i.SCSI_Write10))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SCSI_Write10 &rArr; SCSI_ProcessWrite &rArr; MSC_BOT_SendCSW &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ProcessWrite
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_CheckAddressRange
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_SenseCode
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_PrepareRx
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ProcessCmd
</UL>

<P><STRONG><a name="[226]"></a>USB_OTG_CoreReset</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, usb_core.o(i.USB_OTG_CoreReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_OTG_CoreReset
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_uDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInit
</UL>

<P><STRONG><a name="[22a]"></a>USB_OTG_EnableCommonInt</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, usb_core.o(i.USB_OTG_EnableCommonInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_OTG_EnableCommonInt
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EnableDevInt
</UL>

<P><STRONG><a name="[158]"></a>DCD_HandleEnumDone_ISR</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, usb_dcd_int.o(i.DCD_HandleEnumDone_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DCD_HandleEnumDone_ISR &rArr; USB_OTG_EP0Activate
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_GetDeviceSpeed
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EP0Activate
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[15b]"></a>DCD_HandleInEP_ISR</STRONG> (Thumb, 320 bytes, Stack size 24 bytes, usb_dcd_int.o(i.DCD_HandleInEP_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = DCD_HandleInEP_ISR &rArr; DCD_WriteEmptyTxFifo &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ReadDevAllInEPItr
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EP0_OutStart
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_WriteEmptyTxFifo
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_ReadDevInEP
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[160]"></a>DCD_HandleOutEP_ISR</STRONG> (Thumb, 252 bytes, Stack size 24 bytes, usb_dcd_int.o(i.DCD_HandleOutEP_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DCD_HandleOutEP_ISR &rArr; USB_OTG_EP0_OutStart
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ReadDevOutEP_itr
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ReadDevAllOutEp_itr
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EP0_OutStart
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[214]"></a>DCD_HandleResume_ISR</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, usb_dcd_int.o(i.DCD_HandleResume_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DCD_HandleResume_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[163]"></a>DCD_HandleRxStatusQueueLevel_ISR</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, usb_dcd_int.o(i.DCD_HandleRxStatusQueueLevel_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = DCD_HandleRxStatusQueueLevel_ISR &rArr; USB_OTG_ReadPacket
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ReadPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[216]"></a>DCD_HandleSof_ISR</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, usb_dcd_int.o(i.DCD_HandleSof_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DCD_HandleSof_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[215]"></a>DCD_HandleUSBSuspend_ISR</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, usb_dcd_int.o(i.DCD_HandleUSBSuspend_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DCD_HandleUSBSuspend_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[165]"></a>DCD_HandleUsbReset_ISR</STRONG> (Thumb, 254 bytes, Stack size 40 bytes, usb_dcd_int.o(i.DCD_HandleUsbReset_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = DCD_HandleUsbReset_ISR &rArr; USB_OTG_FlushTxFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_FlushTxFifo
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EP0_OutStart
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[217]"></a>DCD_IsoINIncomplete_ISR</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, usb_dcd_int.o(i.DCD_IsoINIncomplete_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DCD_IsoINIncomplete_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[218]"></a>DCD_IsoOUTIncomplete_ISR</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, usb_dcd_int.o(i.DCD_IsoOUTIncomplete_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DCD_IsoOUTIncomplete_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[21a]"></a>DCD_OTG_ISR</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, usb_dcd_int.o(i.DCD_OTG_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DCD_OTG_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[15d]"></a>DCD_ReadDevInEP</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, usb_dcd_int.o(i.DCD_ReadDevInEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DCD_ReadDevInEP
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleInEP_ISR
</UL>

<P><STRONG><a name="[219]"></a>DCD_SessionRequest_ISR</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, usb_dcd_int.o(i.DCD_SessionRequest_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DCD_SessionRequest_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[15f]"></a>DCD_WriteEmptyTxFifo</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, usb_dcd_int.o(i.DCD_WriteEmptyTxFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = DCD_WriteEmptyTxFifo &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_WritePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleInEP_ISR
</UL>

<P><STRONG><a name="[265]"></a>check_fs</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, ff.o(i.check_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = check_fs &rArr; disk_read &rArr; SD_ReadMultiBlocks &rArr; SD_LowLevel_DMA_RxConfig &rArr; DMA_Cmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
</UL>

<P><STRONG><a name="[27c]"></a>chk_chr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ff.o(i.chk_chr))
<BR><BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[2b5]"></a>chk_lock</STRONG> (Thumb, 134 bytes, Stack size 12 bytes, ff.o(i.chk_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = chk_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
</UL>

<P><STRONG><a name="[26a]"></a>chk_mounted</STRONG> (Thumb, 914 bytes, Stack size 80 bytes, ff.o(i.chk_mounted))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = chk_mounted &rArr; disk_initialize &rArr; SD_disk_initialize &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; mutex_unlock &rArr;  mutex_unlock (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_lock
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
</UL>

<P><STRONG><a name="[26d]"></a>clear_lock</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, ff.o(i.clear_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = clear_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
</UL>

<P><STRONG><a name="[272]"></a>cmp_lfn</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, ff.o(i.cmp_lfn))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = cmp_lfn
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_wtoupper
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[277]"></a>create_chain</STRONG> (Thumb, 202 bytes, Stack size 32 bytes, ff.o(i.create_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_Cmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[27a]"></a>create_name</STRONG> (Thumb, 604 bytes, Stack size 56 bytes, ff.o(i.create_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = create_name &rArr; ff_convert
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_wtoupper
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_convert
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_chr
</UL>
<BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[2af]"></a>dec_lock</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, ff.o(i.dec_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = dec_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>

<P><STRONG><a name="[27e]"></a>dir_alloc</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, ff.o(i.dir_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = dir_alloc &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_Cmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[282]"></a>dir_find</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ff.o(i.dir_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_Cmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cmp
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_lfn
</UL>
<BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[281]"></a>dir_next</STRONG> (Thumb, 276 bytes, Stack size 24 bytes, ff.o(i.dir_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_Cmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
</UL>

<P><STRONG><a name="[287]"></a>dir_read</STRONG> (Thumb, 196 bytes, Stack size 40 bytes, ff.o(i.dir_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = dir_read &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_Cmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pick_lfn
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
</UL>

<P><STRONG><a name="[289]"></a>dir_register</STRONG> (Thumb, 310 bytes, Stack size 48 bytes, ff.o(i.dir_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_Cmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_numname
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fit_lfn
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[28d]"></a>dir_remove</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, ff.o(i.dir_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = dir_remove &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_Cmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
</UL>

<P><STRONG><a name="[27f]"></a>dir_sdi</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, ff.o(i.dir_sdi))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = dir_sdi &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_Cmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
</UL>

<P><STRONG><a name="[2b6]"></a>enq_lock</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, ff.o(i.enq_lock))
<BR><BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[28c]"></a>fit_lfn</STRONG> (Thumb, 122 bytes, Stack size 20 bytes, ff.o(i.fit_lfn))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = fit_lfn
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[2b4]"></a>follow_path</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, ff.o(i.follow_path))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_Cmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>
<BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
</UL>

<P><STRONG><a name="[2bb]"></a>inc_lock</STRONG> (Thumb, 214 bytes, Stack size 12 bytes, ff.o(i.inc_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = inc_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[2b8]"></a>ld_clust</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ff.o(i.ld_clust))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ld_clust
</UL>
<BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[284]"></a>mem_cmp</STRONG> (Thumb, 38 bytes, Stack size 20 bytes, ff.o(i.mem_cmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mem_cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[28a]"></a>mem_cpy</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, ff.o(i.mem_cpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mem_cpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_numname
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[27d]"></a>mem_set</STRONG> (Thumb, 20 bytes, Stack size 12 bytes, ff.o(i.mem_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[280]"></a>move_window</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ff.o(i.move_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_Cmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
</UL>

<P><STRONG><a name="[288]"></a>pick_lfn</STRONG> (Thumb, 112 bytes, Stack size 20 bytes, ff.o(i.pick_lfn))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = pick_lfn
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
</UL>

<P><STRONG><a name="[2ba]"></a>remove_chain</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, ff.o(i.remove_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = remove_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_Cmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
</UL>

<P><STRONG><a name="[2b9]"></a>st_clust</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ff.o(i.st_clust))
<BR><BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[283]"></a>sum_sfn</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, ff.o(i.sum_sfn))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = sum_sfn
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[2be]"></a>sync_fs</STRONG> (Thumb, 200 bytes, Stack size 16 bytes, ff.o(i.sync_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = sync_fs &rArr; sync_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_Cmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
</UL>

<P><STRONG><a name="[285]"></a>sync_window</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, ff.o(i.sync_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = sync_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_Cmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[2b1]"></a>validate</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ff.o(i.validate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = validate
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
</UL>
<BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
